{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome Markdown extensions for mkdocs . Markdown Extension A markdown extension is provided for automatically documenting python code. Modules are referred to as follows: # A Top Level Module @[jetblack_markdown] # A Package @[jetblack_markdown.autodoc] # A function @[jetblack_markdown.autodoc:makeExtension] # A class @[jetblack_markdown.autodoc.metadata:PropertyDescriptor] mkdocs integration This site was generated using mkdocs and the following config: site_name : jetblack-markdown docs_dir : documentation site_dir : docs markdown_extensions : - admonition - codehilite - jetblack_markdown.autodoc : ignore_all : false ignore_inherited : true prefer_docstring : true follow_module_tree : False extra_css : - css/custom.css Customizing All the rendering is done with jinja2 templates. Start by copying the current templates from jetblack_markdown/templates and specify the template_folder in the mkdocs.yml .","title":"Welcome"},{"location":"#welcome","text":"Markdown extensions for mkdocs .","title":"Welcome"},{"location":"#markdown-extension","text":"A markdown extension is provided for automatically documenting python code. Modules are referred to as follows: # A Top Level Module @[jetblack_markdown] # A Package @[jetblack_markdown.autodoc] # A function @[jetblack_markdown.autodoc:makeExtension] # A class @[jetblack_markdown.autodoc.metadata:PropertyDescriptor]","title":"Markdown Extension"},{"location":"#mkdocs-integration","text":"This site was generated using mkdocs and the following config: site_name : jetblack-markdown docs_dir : documentation site_dir : docs markdown_extensions : - admonition - codehilite - jetblack_markdown.autodoc : ignore_all : false ignore_inherited : true prefer_docstring : true follow_module_tree : False extra_css : - css/custom.css","title":"mkdocs integration"},{"location":"#customizing","text":"All the rendering is done with jinja2 templates. Start by copying the current templates from jetblack_markdown/templates and specify the template_folder in the mkdocs.yml .","title":"Customizing"},{"location":"api/jetblack_markdown.autodoc/","text":"module jetblack_markdown.autodoc Summary A markdown extension for creating documentation function jetblack_markdown . makeExtension Summary Make the extension Description This hook function gets picked up by the markdown processor when the extension is listed output = markdown . markdown ( content , extensions = [ \"admonition\" , \"codehilite\" , \"jetblack_markdown.autodoc\" , ]) print ( output ) jetblack_markdown . makeExtension ( *args , **kwargs ) -> Extension Parameters *args **kwargs Returns Extension : The markdown extension class AutodocExtension ( Extension ) Summary Initiate Extension and set up configs. jetblack_markdown . AutodocExtension ( *args , **kwargs ) -> None Parameters *args **kwargs method AutodocExtension . extendMarkdown Summary Add the various processors and patterns to the Markdown Instance. Description This method must be overridden by every extension. Keyword arguments: md: The Markdown instance. AutodocExtension . extendMarkdown ( md : Markdown ) -> None Parameters md : Markdown","title":"jetblack_markdown.autodoc"},{"location":"api/jetblack_markdown.autodoc/#module-jetblack_markdownautodoc","text":"","title":"module jetblack_markdown.autodoc"},{"location":"api/jetblack_markdown.autodoc/#summary","text":"A markdown extension for creating documentation","title":"Summary"},{"location":"api/jetblack_markdown.autodoc/#function-jetblack_markdownmakeextension","text":"","title":"function jetblack_markdown.makeExtension"},{"location":"api/jetblack_markdown.autodoc/#summary_1","text":"Make the extension","title":"Summary"},{"location":"api/jetblack_markdown.autodoc/#description","text":"This hook function gets picked up by the markdown processor when the extension is listed output = markdown . markdown ( content , extensions = [ \"admonition\" , \"codehilite\" , \"jetblack_markdown.autodoc\" , ]) print ( output ) jetblack_markdown . makeExtension ( *args , **kwargs ) -> Extension","title":"Description"},{"location":"api/jetblack_markdown.autodoc/#parameters","text":"*args **kwargs","title":"Parameters"},{"location":"api/jetblack_markdown.autodoc/#returns","text":"Extension : The markdown extension","title":"Returns"},{"location":"api/jetblack_markdown.autodoc/#class-autodocextensionextension","text":"","title":"class AutodocExtension(Extension)"},{"location":"api/jetblack_markdown.autodoc/#summary_2","text":"Initiate Extension and set up configs. jetblack_markdown . AutodocExtension ( *args , **kwargs ) -> None","title":"Summary"},{"location":"api/jetblack_markdown.autodoc/#parameters_1","text":"*args **kwargs","title":"Parameters"},{"location":"api/jetblack_markdown.autodoc/#method-autodocextensionextendmarkdown","text":"","title":"method AutodocExtension.extendMarkdown"},{"location":"api/jetblack_markdown.autodoc/#summary_3","text":"Add the various processors and patterns to the Markdown Instance.","title":"Summary"},{"location":"api/jetblack_markdown.autodoc/#description_1","text":"This method must be overridden by every extension. Keyword arguments: md: The Markdown instance. AutodocExtension . extendMarkdown ( md : Markdown ) -> None","title":"Description"},{"location":"api/jetblack_markdown.autodoc/#parameters_2","text":"md : Markdown","title":"Parameters"},{"location":"api/jetblack_markdown.metadata/","text":"module jetblack_markdown.metadata Summary Meta data class ArgumentDescriptor ( Descriptor ) Summary A descriptor for arguments jetblack_markdown.metadata . ArgumentDescriptor ( name : str , type_ : Optional[str] , description : Optional[str] , default : Optional[str] ) -> None Parameters name : str The argument name type_ : Optional[str] The argument type description : Optional[str] The arguments description default : Optional[str] (optional) The default value. Defaults to ARG_DESCRIPTOR_EMPTY. property ArgumentDescriptor . descriptor_type Summary The descriptor type descriptor_type -> str property ArgumentDescriptor . is_optional Summary Indicates whether the argument is optional Description Note that an argument is optional if it has a default value, not if it has the Optional[...] type decoration. is_optional -> bool class CallableDescriptor ( Descriptor ) Summary A descriptor for a callable jetblack_markdown.metadata . CallableDescriptor ( qualifier : str , name : str , summary : Optional[str] , description : Optional[str] , arguments : List[ArgumentDescriptor] , return_type : str , return_description : Optional[str] , callable_type : CallableType , is_async : bool , is_generator : bool , raises : Optional[List[RaisesDescriptor]] , examples : Optional[List[str]] , module : str , package : Optional[str] , file : Optional[str] ) -> None Parameters qualifier : str The qualifier part of the name name : str The name of the callable summary : Optional[str] The callables summary docstring description : Optional[str] The callables description docstring arguments : List[ArgumentDescriptor] The callables arguments return_type : str The callables return type return_description : Optional[str] The callables return description callable_type : CallableType The type of callable is_async : bool True if the callable is async is_generator : bool True if the callable is a generator raises : Optional[List[RaisesDescriptor]] A list of the exceptions raised examples : Optional[List[str]] A list of examples module : str The module name package : Optional[str] The package name file : Optional[str] The file name property CallableDescriptor . callable_type_description Summary The function type name. Description One of: 'class', 'method', 'async generator function' 'generator function', 'function' callable_type_description -> str property CallableDescriptor . descriptor_type Summary The descriptor type descriptor_type -> str class method CallableDescriptor . create Summary Create a callable descriptor from a callable CallableDescriptor . create ( signature : Optional[Signature] , docstring : Optional[Docstring] , callable_type : CallableType , prefer_docstring : bool , qualifier : Optional[str] ) -> CallableDescriptor Parameters signature : Optional[Signature] (optional) The signature. Defaults to None. docstring : Optional[Docstring] (optional) The docstring. Defaults to None. callable_type : CallableType (optional) The function type. Defaults to CallableType.FUNCTION. prefer_docstring : bool (optional) If true prefer the docstring. qualifier : Optional[str] (optional) An overload for the qualifier. Defaults to None. Returns CallableDescriptor : A callable descriptor class CallableType ( Enum ) Summary An enum indicating the type of a callable jetblack_markdown.metadata . CallableType ( value : Any , names : Any , * , module : Any , qualname : Any , type : Any , start : Any ) -> None Parameters value : Any names : Any (optional) module : Any (optional) qualname : Any (optional) type : Any (optional) start : Any (optional) class ClassDescriptor ( Descriptor ) Summary A class descriptor jetblack_markdown.metadata . ClassDescriptor ( name : str , summary : Optional[str] , description : Optional[str] , constructor : Optional[CallableDescriptor] , attributes : List[ArgumentDescriptor] , properties : List[PropertyDescriptor] , class_methods : List[CallableDescriptor] , methods : List[CallableDescriptor] , examples : Optional[List[str]] , module : str , package : Optional[str] , file : Optional[str] , bases : List[ClassDescription] ) -> None Parameters name : str The class name summary : Optional[str] The docstring summary description : Optional[str] The docstring description constructor : Optional[CallableDescriptor] The constructor attributes : List[ArgumentDescriptor] The class attributes properties : List[PropertyDescriptor] The class properties class_methods : List[CallableDescriptor] The class methods methods : List[CallableDescriptor] The class methods examples : Optional[List[str]] Examples from the docstring module : str The module package : Optional[str] The package file : Optional[str] The file, bases : List[ClassDescription] The base classes property ClassDescriptor . descriptor_type Summary The descriptor type descriptor_type -> str class method ClassDescriptor . create Summary Create a class ClassDescriptor . create ( class_from_init : bool , ignore_dunder : bool , ignore_private : bool , ignore_inherited : bool , importing_module : Optional[str] , prefer_docstring : bool ) -> ClassDescriptor Parameters class_from_init : bool If True take the docstring from the init function ignore_dunder : bool If True ignore __ XXX __ functions ignore_private : bool If True ignore private methods (those prefixed _ XXX) ignore_inherited : bool If True ignore inherited methods importing_module : Optional[str] (optional) The importing module, defaults to None prefer_docstring : bool (optional) If true prefer the docstring. Returns ClassDescriptor : The class descriptor class Descriptor Summary The descriptor base class jetblack_markdown.metadata . Descriptor ( ) -> None property Descriptor . descriptor_type Summary The descriptor type descriptor_type -> str class ModuleDescriptor ( Descriptor ) Summary A module descriptor jetblack_markdown.metadata . ModuleDescriptor ( name : str , summary : Optional[str] , description : Optional[str] , attributes : List[ArgumentDescriptor] , examples : Optional[List[str]] , package : Optional[str] , file : Optional[str] , classes : List[ClassDescriptor] , functions : List[CallableDescriptor] , modules : List[ModuleDescriptor] ) -> None Parameters name : str The module name summary : Optional[str] The module summary description : Optional[str] The module description attributes : List[ArgumentDescriptor] The attribute list examples : Optional[List[str]] Examples from the docstring package : Optional[str] The package name file : Optional[str] The file name classes : List[ClassDescriptor] Classes in the module functions : List[CallableDescriptor] Functions in the module modules : List[ModuleDescriptor] The child modules property ModuleDescriptor . descriptor_type Summary The descriptor type descriptor_type -> str class method ModuleDescriptor . create Summary Create a module descriptor ModuleDescriptor . create ( class_from_init : bool , ignore_dunder : bool , ignore_private : bool , ignore_all : bool , ignore_inherited : bool , prefer_docstring : bool , follow_module_tree : bool ) -> ModuleDescriptor Parameters class_from_init : bool If True take the docstring from the init function ignore_dunder : bool If True ignore __ XXX __ functions ignore_private : bool If True ignore private methods (those prefixed _XXX) ignore_all : bool If True ignore the __ all __ member. ignore_inherited : bool prefer_docstring : bool If true prefer the docstring follow_module_tree : bool If true follow the module tree Returns ModuleDescriptor : A module descriptor class PropertyDescriptor ( Descriptor ) Summary A properties descriptor jetblack_markdown.metadata . PropertyDescriptor ( qualifier : str , name : str , summary : Optional[str] , description : Optional[str] , type_ : Optional[str] , is_settable : bool , is_deletable : bool , raises : Optional[List[RaisesDescriptor]] , examples : Optional[List[str]] ) -> None Parameters qualifier : str The qualifier name : str The property name summary : Optional[str] The summary from the docstring description : Optional[str] The description from the docstring type_ : Optional[str] The property type is_settable : bool If True the property can be set is_deletable : bool If True the property can be deleted raises : Optional[List[RaisesDescriptor]] A list of the exceptions the property might raise. examples : Optional[List[str]] A list of examples from the docstring property PropertyDescriptor . descriptor_type Summary The descriptor type descriptor_type -> str class method PropertyDescriptor . create Summary Create a property descriptor from PropertyDescriptor . create ( klass : Any , property_name : str ) -> PropertyDescriptor Parameters klass : Any The class object property_name : str The name of the property Returns PropertyDescriptor : A property descriptor class RaisesDescriptor ( Descriptor ) Summary A raises descriptor jetblack_markdown.metadata . RaisesDescriptor ( type_ : str , description : str ) -> None Parameters type_ : str The type of exception raised description : str The exception description property RaisesDescriptor . descriptor_type Summary The descriptor type descriptor_type -> str","title":"jetblack_markdown.metadata"},{"location":"api/jetblack_markdown.metadata/#module-jetblack_markdownmetadata","text":"","title":"module jetblack_markdown.metadata"},{"location":"api/jetblack_markdown.metadata/#summary","text":"Meta data","title":"Summary"},{"location":"api/jetblack_markdown.metadata/#class-argumentdescriptordescriptor","text":"","title":"class ArgumentDescriptor(Descriptor)"},{"location":"api/jetblack_markdown.metadata/#summary_1","text":"A descriptor for arguments jetblack_markdown.metadata . ArgumentDescriptor ( name : str , type_ : Optional[str] , description : Optional[str] , default : Optional[str] ) -> None","title":"Summary"},{"location":"api/jetblack_markdown.metadata/#parameters","text":"name : str The argument name type_ : Optional[str] The argument type description : Optional[str] The arguments description default : Optional[str] (optional) The default value. Defaults to ARG_DESCRIPTOR_EMPTY.","title":"Parameters"},{"location":"api/jetblack_markdown.metadata/#property-argumentdescriptordescriptor_type","text":"","title":"property ArgumentDescriptor.descriptor_type"},{"location":"api/jetblack_markdown.metadata/#summary_2","text":"The descriptor type descriptor_type -> str","title":"Summary"},{"location":"api/jetblack_markdown.metadata/#property-argumentdescriptoris_optional","text":"","title":"property ArgumentDescriptor.is_optional"},{"location":"api/jetblack_markdown.metadata/#summary_3","text":"Indicates whether the argument is optional","title":"Summary"},{"location":"api/jetblack_markdown.metadata/#description","text":"Note that an argument is optional if it has a default value, not if it has the Optional[...] type decoration. is_optional -> bool","title":"Description"},{"location":"api/jetblack_markdown.metadata/#class-callabledescriptordescriptor","text":"","title":"class CallableDescriptor(Descriptor)"},{"location":"api/jetblack_markdown.metadata/#summary_4","text":"A descriptor for a callable jetblack_markdown.metadata . CallableDescriptor ( qualifier : str , name : str , summary : Optional[str] , description : Optional[str] , arguments : List[ArgumentDescriptor] , return_type : str , return_description : Optional[str] , callable_type : CallableType , is_async : bool , is_generator : bool , raises : Optional[List[RaisesDescriptor]] , examples : Optional[List[str]] , module : str , package : Optional[str] , file : Optional[str] ) -> None","title":"Summary"},{"location":"api/jetblack_markdown.metadata/#parameters_1","text":"qualifier : str The qualifier part of the name name : str The name of the callable summary : Optional[str] The callables summary docstring description : Optional[str] The callables description docstring arguments : List[ArgumentDescriptor] The callables arguments return_type : str The callables return type return_description : Optional[str] The callables return description callable_type : CallableType The type of callable is_async : bool True if the callable is async is_generator : bool True if the callable is a generator raises : Optional[List[RaisesDescriptor]] A list of the exceptions raised examples : Optional[List[str]] A list of examples module : str The module name package : Optional[str] The package name file : Optional[str] The file name","title":"Parameters"},{"location":"api/jetblack_markdown.metadata/#property-callabledescriptorcallable_type_description","text":"","title":"property CallableDescriptor.callable_type_description"},{"location":"api/jetblack_markdown.metadata/#summary_5","text":"The function type name.","title":"Summary"},{"location":"api/jetblack_markdown.metadata/#description_1","text":"One of: 'class', 'method', 'async generator function' 'generator function', 'function' callable_type_description -> str","title":"Description"},{"location":"api/jetblack_markdown.metadata/#property-callabledescriptordescriptor_type","text":"","title":"property CallableDescriptor.descriptor_type"},{"location":"api/jetblack_markdown.metadata/#summary_6","text":"The descriptor type descriptor_type -> str","title":"Summary"},{"location":"api/jetblack_markdown.metadata/#class-method-callabledescriptorcreate","text":"","title":"class method CallableDescriptor.create"},{"location":"api/jetblack_markdown.metadata/#summary_7","text":"Create a callable descriptor from a callable CallableDescriptor . create ( signature : Optional[Signature] , docstring : Optional[Docstring] , callable_type : CallableType , prefer_docstring : bool , qualifier : Optional[str] ) -> CallableDescriptor","title":"Summary"},{"location":"api/jetblack_markdown.metadata/#parameters_2","text":"signature : Optional[Signature] (optional) The signature. Defaults to None. docstring : Optional[Docstring] (optional) The docstring. Defaults to None. callable_type : CallableType (optional) The function type. Defaults to CallableType.FUNCTION. prefer_docstring : bool (optional) If true prefer the docstring. qualifier : Optional[str] (optional) An overload for the qualifier. Defaults to None.","title":"Parameters"},{"location":"api/jetblack_markdown.metadata/#returns","text":"CallableDescriptor : A callable descriptor","title":"Returns"},{"location":"api/jetblack_markdown.metadata/#class-callabletypeenum","text":"","title":"class CallableType(Enum)"},{"location":"api/jetblack_markdown.metadata/#summary_8","text":"An enum indicating the type of a callable jetblack_markdown.metadata . CallableType ( value : Any , names : Any , * , module : Any , qualname : Any , type : Any , start : Any ) -> None","title":"Summary"},{"location":"api/jetblack_markdown.metadata/#parameters_3","text":"value : Any names : Any (optional) module : Any (optional) qualname : Any (optional) type : Any (optional) start : Any (optional)","title":"Parameters"},{"location":"api/jetblack_markdown.metadata/#class-classdescriptordescriptor","text":"","title":"class ClassDescriptor(Descriptor)"},{"location":"api/jetblack_markdown.metadata/#summary_9","text":"A class descriptor jetblack_markdown.metadata . ClassDescriptor ( name : str , summary : Optional[str] , description : Optional[str] , constructor : Optional[CallableDescriptor] , attributes : List[ArgumentDescriptor] , properties : List[PropertyDescriptor] , class_methods : List[CallableDescriptor] , methods : List[CallableDescriptor] , examples : Optional[List[str]] , module : str , package : Optional[str] , file : Optional[str] , bases : List[ClassDescription] ) -> None","title":"Summary"},{"location":"api/jetblack_markdown.metadata/#parameters_4","text":"name : str The class name summary : Optional[str] The docstring summary description : Optional[str] The docstring description constructor : Optional[CallableDescriptor] The constructor attributes : List[ArgumentDescriptor] The class attributes properties : List[PropertyDescriptor] The class properties class_methods : List[CallableDescriptor] The class methods methods : List[CallableDescriptor] The class methods examples : Optional[List[str]] Examples from the docstring module : str The module package : Optional[str] The package file : Optional[str] The file, bases : List[ClassDescription] The base classes","title":"Parameters"},{"location":"api/jetblack_markdown.metadata/#property-classdescriptordescriptor_type","text":"","title":"property ClassDescriptor.descriptor_type"},{"location":"api/jetblack_markdown.metadata/#summary_10","text":"The descriptor type descriptor_type -> str","title":"Summary"},{"location":"api/jetblack_markdown.metadata/#class-method-classdescriptorcreate","text":"","title":"class method ClassDescriptor.create"},{"location":"api/jetblack_markdown.metadata/#summary_11","text":"Create a class ClassDescriptor . create ( class_from_init : bool , ignore_dunder : bool , ignore_private : bool , ignore_inherited : bool , importing_module : Optional[str] , prefer_docstring : bool ) -> ClassDescriptor","title":"Summary"},{"location":"api/jetblack_markdown.metadata/#parameters_5","text":"class_from_init : bool If True take the docstring from the init function ignore_dunder : bool If True ignore __ XXX __ functions ignore_private : bool If True ignore private methods (those prefixed _ XXX) ignore_inherited : bool If True ignore inherited methods importing_module : Optional[str] (optional) The importing module, defaults to None prefer_docstring : bool (optional) If true prefer the docstring.","title":"Parameters"},{"location":"api/jetblack_markdown.metadata/#returns_1","text":"ClassDescriptor : The class descriptor","title":"Returns"},{"location":"api/jetblack_markdown.metadata/#class-descriptor","text":"","title":"class Descriptor"},{"location":"api/jetblack_markdown.metadata/#summary_12","text":"The descriptor base class jetblack_markdown.metadata . Descriptor ( ) -> None","title":"Summary"},{"location":"api/jetblack_markdown.metadata/#property-descriptordescriptor_type","text":"","title":"property Descriptor.descriptor_type"},{"location":"api/jetblack_markdown.metadata/#summary_13","text":"The descriptor type descriptor_type -> str","title":"Summary"},{"location":"api/jetblack_markdown.metadata/#class-moduledescriptordescriptor","text":"","title":"class ModuleDescriptor(Descriptor)"},{"location":"api/jetblack_markdown.metadata/#summary_14","text":"A module descriptor jetblack_markdown.metadata . ModuleDescriptor ( name : str , summary : Optional[str] , description : Optional[str] , attributes : List[ArgumentDescriptor] , examples : Optional[List[str]] , package : Optional[str] , file : Optional[str] , classes : List[ClassDescriptor] , functions : List[CallableDescriptor] , modules : List[ModuleDescriptor] ) -> None","title":"Summary"},{"location":"api/jetblack_markdown.metadata/#parameters_6","text":"name : str The module name summary : Optional[str] The module summary description : Optional[str] The module description attributes : List[ArgumentDescriptor] The attribute list examples : Optional[List[str]] Examples from the docstring package : Optional[str] The package name file : Optional[str] The file name classes : List[ClassDescriptor] Classes in the module functions : List[CallableDescriptor] Functions in the module modules : List[ModuleDescriptor] The child modules","title":"Parameters"},{"location":"api/jetblack_markdown.metadata/#property-moduledescriptordescriptor_type","text":"","title":"property ModuleDescriptor.descriptor_type"},{"location":"api/jetblack_markdown.metadata/#summary_15","text":"The descriptor type descriptor_type -> str","title":"Summary"},{"location":"api/jetblack_markdown.metadata/#class-method-moduledescriptorcreate","text":"","title":"class method ModuleDescriptor.create"},{"location":"api/jetblack_markdown.metadata/#summary_16","text":"Create a module descriptor ModuleDescriptor . create ( class_from_init : bool , ignore_dunder : bool , ignore_private : bool , ignore_all : bool , ignore_inherited : bool , prefer_docstring : bool , follow_module_tree : bool ) -> ModuleDescriptor","title":"Summary"},{"location":"api/jetblack_markdown.metadata/#parameters_7","text":"class_from_init : bool If True take the docstring from the init function ignore_dunder : bool If True ignore __ XXX __ functions ignore_private : bool If True ignore private methods (those prefixed _XXX) ignore_all : bool If True ignore the __ all __ member. ignore_inherited : bool prefer_docstring : bool If true prefer the docstring follow_module_tree : bool If true follow the module tree","title":"Parameters"},{"location":"api/jetblack_markdown.metadata/#returns_2","text":"ModuleDescriptor : A module descriptor","title":"Returns"},{"location":"api/jetblack_markdown.metadata/#class-propertydescriptordescriptor","text":"","title":"class PropertyDescriptor(Descriptor)"},{"location":"api/jetblack_markdown.metadata/#summary_17","text":"A properties descriptor jetblack_markdown.metadata . PropertyDescriptor ( qualifier : str , name : str , summary : Optional[str] , description : Optional[str] , type_ : Optional[str] , is_settable : bool , is_deletable : bool , raises : Optional[List[RaisesDescriptor]] , examples : Optional[List[str]] ) -> None","title":"Summary"},{"location":"api/jetblack_markdown.metadata/#parameters_8","text":"qualifier : str The qualifier name : str The property name summary : Optional[str] The summary from the docstring description : Optional[str] The description from the docstring type_ : Optional[str] The property type is_settable : bool If True the property can be set is_deletable : bool If True the property can be deleted raises : Optional[List[RaisesDescriptor]] A list of the exceptions the property might raise. examples : Optional[List[str]] A list of examples from the docstring","title":"Parameters"},{"location":"api/jetblack_markdown.metadata/#property-propertydescriptordescriptor_type","text":"","title":"property PropertyDescriptor.descriptor_type"},{"location":"api/jetblack_markdown.metadata/#summary_18","text":"The descriptor type descriptor_type -> str","title":"Summary"},{"location":"api/jetblack_markdown.metadata/#class-method-propertydescriptorcreate","text":"","title":"class method PropertyDescriptor.create"},{"location":"api/jetblack_markdown.metadata/#summary_19","text":"Create a property descriptor from PropertyDescriptor . create ( klass : Any , property_name : str ) -> PropertyDescriptor","title":"Summary"},{"location":"api/jetblack_markdown.metadata/#parameters_9","text":"klass : Any The class object property_name : str The name of the property","title":"Parameters"},{"location":"api/jetblack_markdown.metadata/#returns_3","text":"PropertyDescriptor : A property descriptor","title":"Returns"},{"location":"api/jetblack_markdown.metadata/#class-raisesdescriptordescriptor","text":"","title":"class RaisesDescriptor(Descriptor)"},{"location":"api/jetblack_markdown.metadata/#summary_20","text":"A raises descriptor jetblack_markdown.metadata . RaisesDescriptor ( type_ : str , description : str ) -> None","title":"Summary"},{"location":"api/jetblack_markdown.metadata/#parameters_10","text":"type_ : str The type of exception raised description : str The exception description","title":"Parameters"},{"location":"api/jetblack_markdown.metadata/#property-raisesdescriptordescriptor_type","text":"","title":"property RaisesDescriptor.descriptor_type"},{"location":"api/jetblack_markdown.metadata/#summary_21","text":"The descriptor type descriptor_type -> str","title":"Summary"},{"location":"user-guide/config/","text":"Configuration The configuration parameters can be specified in the mkdocs.yml file: markdown_extensions : - admonition - codehilite - jetblack_markdown.autodoc : class_from_init : true ignore_dunder : true ignore_private : true ignore_all : false prefer_docstring : true template_file : black.jinja2 template_folder : /usr/local/share/jetblack-markdown class_from_init ( bool, optional ) = true If true use the docstring from the __init__ function for classes when generating the documentation for the constructor; otherwise use the docstring from the class. e.g. class MyClass : \"\"\"A simple class. If class_from_init == false use this docstring. Arguments: name (str): The name \"\"\" def __init__ ( self , name : str ): \"\"\"A simple class. If class_from_init == true use this docstring. Arguments: name (str): The name self.name = name ignore_dunder ( bool, optional ) = true If true ignore __XXX__ functions. ignore_private ( bool, optional ) = true If true ignore methods (those prefixed _XXX). ignore_all ( bool, optional ) = false If false use the __all__ member to constrain which objects are documented. ignore_inherited ( bool, optional ) = true If true ignore inherited members. prefer_docstring ( bool, optional ) = true If true prefer the docstring over the typing and inspection. This can be useful in reducing the verboseness of the output, and providing symbolic defaults rather than literal defaults. e.g. SomeType = Optional [ Union [ str , int ]] SOME_DEFAULT = \"This is not a test\" def some_func ( arg : SomeType = SOME_DEFAULT ) -> None : \"\"\"Some function Arguments: arg (SomeType): an argument \"\"\" pass If prefer_docstring is true this would provide: def some_func ( arg : SomeType = SOME_DEFAULT ) -> None : But if prefer_docstring is false : def some_func ( arg : Union [ str , int , NoneType ] = \"This is not a test\" ) -> None : follow_module_tree ( bool, optional ) = false If true explore the module tree javadoc style. This is most useful when combined with ignore_all = false . template_file ( Optional[str], optional ) = \"main.jinja2\" The name of the template file to run. template_folder ( Optional[str], optional ) = None The folder in which the templates can be found. If this is not specified the built in templates are used.","title":"Configuration"},{"location":"user-guide/config/#configuration","text":"The configuration parameters can be specified in the mkdocs.yml file: markdown_extensions : - admonition - codehilite - jetblack_markdown.autodoc : class_from_init : true ignore_dunder : true ignore_private : true ignore_all : false prefer_docstring : true template_file : black.jinja2 template_folder : /usr/local/share/jetblack-markdown","title":"Configuration"},{"location":"user-guide/config/#class_from_init-bool-optional-true","text":"If true use the docstring from the __init__ function for classes when generating the documentation for the constructor; otherwise use the docstring from the class. e.g. class MyClass : \"\"\"A simple class. If class_from_init == false use this docstring. Arguments: name (str): The name \"\"\" def __init__ ( self , name : str ): \"\"\"A simple class. If class_from_init == true use this docstring. Arguments: name (str): The name self.name = name","title":"class_from_init (bool, optional) = true"},{"location":"user-guide/config/#ignore_dunder-bool-optional-true","text":"If true ignore __XXX__ functions.","title":"ignore_dunder (bool, optional) = true"},{"location":"user-guide/config/#ignore_private-bool-optional-true","text":"If true ignore methods (those prefixed _XXX).","title":"ignore_private (bool, optional) = true"},{"location":"user-guide/config/#ignore_all-bool-optional-false","text":"If false use the __all__ member to constrain which objects are documented.","title":"ignore_all (bool, optional) = false"},{"location":"user-guide/config/#ignore_inherited-bool-optional-true","text":"If true ignore inherited members.","title":"ignore_inherited (bool, optional) = true"},{"location":"user-guide/config/#prefer_docstring-bool-optional-true","text":"If true prefer the docstring over the typing and inspection. This can be useful in reducing the verboseness of the output, and providing symbolic defaults rather than literal defaults. e.g. SomeType = Optional [ Union [ str , int ]] SOME_DEFAULT = \"This is not a test\" def some_func ( arg : SomeType = SOME_DEFAULT ) -> None : \"\"\"Some function Arguments: arg (SomeType): an argument \"\"\" pass If prefer_docstring is true this would provide: def some_func ( arg : SomeType = SOME_DEFAULT ) -> None : But if prefer_docstring is false : def some_func ( arg : Union [ str , int , NoneType ] = \"This is not a test\" ) -> None :","title":"prefer_docstring (bool, optional) = true"},{"location":"user-guide/config/#follow_module_tree-bool-optional-false","text":"If true explore the module tree javadoc style. This is most useful when combined with ignore_all = false .","title":"follow_module_tree (bool, optional) = false"},{"location":"user-guide/config/#template_file-optionalstr-optional-mainjinja2","text":"The name of the template file to run.","title":"template_file (Optional[str], optional) = \"main.jinja2\""},{"location":"user-guide/config/#template_folder-optionalstr-optional-none","text":"The folder in which the templates can be found. If this is not specified the built in templates are used.","title":"template_folder (Optional[str], optional) = None"},{"location":"user-guide/docstrings/","text":"Docstrings The automatic documentation will use docstrings do enhance the documentation. As this is a markdown extension, markdown an be used in the docstrings. def makeExtension ( * args , ** kwargs ) -> Extension : \"\"\"Make the extension This hook *function* gets picked up by the markdown processor when the extension is listed ```python output = markdown.markdown( content, extensions=[ \"admonition\", \"codehilite\", \"jetblack_markdown.autodoc\", ]) print(output) ``` Returns: Extension: The extension \"\"\" return AutodocExtension ( * args , ** kwargs ) Note the markdown on function , and the python code block. Docstrings are parsed with the docstrings_parser . This has been tested only with Google style docstrings. Escaping markdown To escape markdown, use the html entity surrounded by the <span> tag. The dunder init: <span>&#95;&#95;</span>XXX<span>&#95;&#95;</span> The dunder init: __ XXX __","title":"Docstrings"},{"location":"user-guide/docstrings/#docstrings","text":"The automatic documentation will use docstrings do enhance the documentation. As this is a markdown extension, markdown an be used in the docstrings. def makeExtension ( * args , ** kwargs ) -> Extension : \"\"\"Make the extension This hook *function* gets picked up by the markdown processor when the extension is listed ```python output = markdown.markdown( content, extensions=[ \"admonition\", \"codehilite\", \"jetblack_markdown.autodoc\", ]) print(output) ``` Returns: Extension: The extension \"\"\" return AutodocExtension ( * args , ** kwargs ) Note the markdown on function , and the python code block. Docstrings are parsed with the docstrings_parser . This has been tested only with Google style docstrings.","title":"Docstrings"},{"location":"user-guide/docstrings/#escaping-markdown","text":"To escape markdown, use the html entity surrounded by the <span> tag. The dunder init: <span>&#95;&#95;</span>XXX<span>&#95;&#95;</span> The dunder init: __ XXX __","title":"Escaping markdown"},{"location":"user-guide/styling/","text":"Styling When using the standard templates the following styles are recommended. span . autodoc-vartype { color : #c53204 ; } var . autodoc-varname { color : #4b9e48 ; } h3 . autodoc-title { font-weight : bold ; } h4 . autodoc-title { font-weight : bold ; } . autodoc-qualifier { font-weight : normal ; } . autodoc-argument { text-indent : 4 em ; } . autodoc-signature , . autodoc-property { font-family : \"Roboto Mono\" , \"Courier New\" , Courier , monospace ; }","title":"Styling"},{"location":"user-guide/styling/#styling","text":"When using the standard templates the following styles are recommended. span . autodoc-vartype { color : #c53204 ; } var . autodoc-varname { color : #4b9e48 ; } h3 . autodoc-title { font-weight : bold ; } h4 . autodoc-title { font-weight : bold ; } . autodoc-qualifier { font-weight : normal ; } . autodoc-argument { text-indent : 4 em ; } . autodoc-signature , . autodoc-property { font-family : \"Roboto Mono\" , \"Courier New\" , Courier , monospace ; }","title":"Styling"},{"location":"user-guide/templates/","text":"Templates Jinja2 templating is used to render the documentation. The entry point The template file is passed an obj parameter which is of type jetblack_markdown.metadata.Descriptor . The descriptor has a type property. The default template file looks like this: { % import 'macros.jinja2' as macros with context % } { % if obj . descriptor_type == \"module\" % } {{ macros . render_module ( obj ) }} { % elif obj . descriptor_type == \"class\" % } {{ macros . render_class ( obj ) }} { % elif obj . descriptor_type == \"callable\" % } {{ macros . render_callable ( obj ) }} { % endif % } It renders the appropriate template by checking the type of the descriptor and then calling a macro. A renderer Here's a simple render macro for rendering the \"Summary\" which is usually the long description from the docstring. { % macro render_summary ( summary ) -% } { % if summary -% } < h4 class = \"autodoc-title\" > Summary </ h4 > {{ summary | md_format }} { %- endif % } { %- endmacro % } First it checks if the long description has been specified. If it has it renders it as a level 4 heading with the class autodoc-title . Finally it uses a built in custom filter to convert the docstring to markdown. The custom filter will generate it's contents in a <p> ... </p> block. Here's a more complex example of rendering a signature. { % macro render_signature ( callable ) -% } < code class = \"autodoc-signature\" > { %- if callable . is_async -% } < span class = \"autodoc-keyword\" > async </ span >< span > </ span > { %- endif -% } < span class = \"autodoc-qualifier\" > {{ callable . qualifier }} </ span >< span class = \"autodoc-punctuation\" >.</ span >< var class = \"autodoc-varname\" > {{ callable . name }} </ var >< span class = \"autodoc-punctuation\" > ( </ span > { %- for arg in callable . arguments -% } { %- if not loop . first -% } < span class = \"autodoc-punctuation\" > , </ span > { %- endif -% } < var class = \"autodoc-varname\" > {{ arg . name }} </ var > { %- if arg . type -% } < span class = \"autodoc-punctuation\" > : </ span >< span class = \"autodoc-vartype\" > {{ arg . type }} </ span > { %- endif -% } { %- endfor -% } < span class = \"autodoc-punctuation\" > ) </ span > { %- if return_type -% } < span class = \"autodoc-punctuation\" > -& gt ; </ span >< span class = \"autodoc-vartype\" > {{ return_type }} </ span > { %- endif -% } </ code > { %- endmacro % } The md_format filter A custom filter md_format has been provided to process code that may contain markdown, such as the summary. Here's an example of its use. { % macro render_summary ( summary ) -% } { % if summary -% } < h4 class = \"autodoc-title\" > Summary </ h4 > {{ summary | md_format }} { %- endif % } { %- endmacro % }","title":"Templates"},{"location":"user-guide/templates/#templates","text":"Jinja2 templating is used to render the documentation.","title":"Templates"},{"location":"user-guide/templates/#the-entry-point","text":"The template file is passed an obj parameter which is of type jetblack_markdown.metadata.Descriptor . The descriptor has a type property. The default template file looks like this: { % import 'macros.jinja2' as macros with context % } { % if obj . descriptor_type == \"module\" % } {{ macros . render_module ( obj ) }} { % elif obj . descriptor_type == \"class\" % } {{ macros . render_class ( obj ) }} { % elif obj . descriptor_type == \"callable\" % } {{ macros . render_callable ( obj ) }} { % endif % } It renders the appropriate template by checking the type of the descriptor and then calling a macro.","title":"The entry point"},{"location":"user-guide/templates/#a-renderer","text":"Here's a simple render macro for rendering the \"Summary\" which is usually the long description from the docstring. { % macro render_summary ( summary ) -% } { % if summary -% } < h4 class = \"autodoc-title\" > Summary </ h4 > {{ summary | md_format }} { %- endif % } { %- endmacro % } First it checks if the long description has been specified. If it has it renders it as a level 4 heading with the class autodoc-title . Finally it uses a built in custom filter to convert the docstring to markdown. The custom filter will generate it's contents in a <p> ... </p> block. Here's a more complex example of rendering a signature. { % macro render_signature ( callable ) -% } < code class = \"autodoc-signature\" > { %- if callable . is_async -% } < span class = \"autodoc-keyword\" > async </ span >< span > </ span > { %- endif -% } < span class = \"autodoc-qualifier\" > {{ callable . qualifier }} </ span >< span class = \"autodoc-punctuation\" >.</ span >< var class = \"autodoc-varname\" > {{ callable . name }} </ var >< span class = \"autodoc-punctuation\" > ( </ span > { %- for arg in callable . arguments -% } { %- if not loop . first -% } < span class = \"autodoc-punctuation\" > , </ span > { %- endif -% } < var class = \"autodoc-varname\" > {{ arg . name }} </ var > { %- if arg . type -% } < span class = \"autodoc-punctuation\" > : </ span >< span class = \"autodoc-vartype\" > {{ arg . type }} </ span > { %- endif -% } { %- endfor -% } < span class = \"autodoc-punctuation\" > ) </ span > { %- if return_type -% } < span class = \"autodoc-punctuation\" > -& gt ; </ span >< span class = \"autodoc-vartype\" > {{ return_type }} </ span > { %- endif -% } </ code > { %- endmacro % }","title":"A renderer"},{"location":"user-guide/templates/#the-md_format-filter","text":"A custom filter md_format has been provided to process code that may contain markdown, such as the summary. Here's an example of its use. { % macro render_summary ( summary ) -% } { % if summary -% } < h4 class = \"autodoc-title\" > Summary </ h4 > {{ summary | md_format }} { %- endif % } { %- endmacro % }","title":"The md_format filter"}]}