{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>Markdown extensions for mkdocs.</p>"},{"location":"#autodoc-extension","title":"Autodoc Extension","text":"<p>A markdown extension is provided for automatically documenting python code.</p> <p>Modules are referred to as follows:</p> <pre><code># A Top Level Module\n\n@[jetblack_markdown]\n\n# A Package\n\n@[jetblack_markdown.autodoc]\n\n# A function\n\n@[jetblack_markdown.autodoc:makeExtension]\n\n# A class\n\n@[jetblack_markdown.autodoc.metadata:PropertyDescriptor]\n</code></pre>"},{"location":"#mkdocs-integration","title":"mkdocs integration","text":"<p>This site was generated using <code>mkdocs</code> and the following config:</p> <pre><code>site_name: jetblack-markdown\n\ndocs_dir: documentation\nsite_dir: docs\n\nmarkdown_extensions:\n  - admonition\n  - codehilite\n  - jetblack_markdown.autodoc:\n      ignore_all: false\n      ignore_inherited: true\n      prefer_docstring: true\n      follow_module_tree: False\n\nextra_css:\n    - css/custom.css\n</code></pre>"},{"location":"#customizing","title":"Customizing","text":"<p>All the rendering is done with jinja2 templates. Start by copying the current templates from jetblack_markdown/templates and specify the <code>template_folder</code> in the <code>mkdocs.yml</code>.</p>"},{"location":"#latex2mathml-extension","title":"Latex2MathML Extension","text":"<p>A markdown extension is provided for converting LaTex style math formula to MathML. This uses the latex2mathml package.</p> <p>An inline formula looks like: d1=ln(F/K)+(\u03c32/2)T\u03c3T.</p> <p>A block looks like:</p> d1=ln(F/K)+(\u03c32/2)T\u03c3T <p>The outer <code>&lt;math&gt;</code> tag has the HTML class <code>\"latex2mathml\"</code>.</p>"},{"location":"#mkdocs-integration_1","title":"mkdocs integration","text":"<p>This site was generated using <code>mkdocs</code> and the following config:</p> <pre><code>site_name: jetblack-markdown\n\ndocs_dir: documentation\nsite_dir: docs\n\nmarkdown_extensions:\n  - admonition\n  - codehilite\n  - jetblack_markdown.autodoc:\n      ignore_all: false\n      ignore_inherited: true\n      prefer_docstring: true\n      follow_module_tree: False\n  - jetblack_markdown.latex2mathml:\n\nextra_css:\n    - css/custom.css\n</code></pre>"},{"location":"api/jetblack_markdown.autodoc/","title":"jetblack_markdown.autodoc","text":""},{"location":"api/jetblack_markdown.autodoc/#module-jetblack_markdownautodoc","title":"module jetblack_markdown.autodoc","text":""},{"location":"api/jetblack_markdown.autodoc/#summary","title":"Summary","text":"<p>A markdown extension for creating documentation</p>"},{"location":"api/jetblack_markdown.autodoc/#function-jetblack_markdownmakeextension","title":"function jetblack_markdown.makeExtension","text":""},{"location":"api/jetblack_markdown.autodoc/#summary_1","title":"Summary","text":"<p>Make the extension</p> jetblack_markdown.makeExtension( *args, **kwargs ) -&gt; Extension"},{"location":"api/jetblack_markdown.autodoc/#description","title":"Description","text":"<p>This hook function gets picked up by the markdown processor when the extension is listed</p> <pre><code>output = markdown.markdown(\n    content, extensions=[\n        \"admonition\",\n        \"codehilite\",\n        \"jetblack_markdown.autodoc\",\n    ])\nprint(output)\n</code></pre>"},{"location":"api/jetblack_markdown.autodoc/#parameters","title":"Parameters","text":"*args **kwargs"},{"location":"api/jetblack_markdown.autodoc/#returns","title":"Returns","text":"Extension:  The markdown extension"},{"location":"api/jetblack_markdown.autodoc/#class-autodocextensionextension","title":"class AutodocExtension(Extension)","text":""},{"location":"api/jetblack_markdown.autodoc/#summary_2","title":"Summary","text":"<p>Initiate Extension and set up configs. </p> jetblack_markdown.AutodocExtension( *args, **kwargs ) -&gt; None"},{"location":"api/jetblack_markdown.autodoc/#parameters_1","title":"Parameters","text":"*args **kwargs"},{"location":"api/jetblack_markdown.autodoc/#method-autodocextensionextendmarkdown","title":"method AutodocExtension.extendMarkdown","text":""},{"location":"api/jetblack_markdown.autodoc/#summary_3","title":"Summary","text":"<p>Add the various processors and patterns to the Markdown Instance.</p> AutodocExtension.extendMarkdown( md: Markdown ) -&gt; None"},{"location":"api/jetblack_markdown.autodoc/#description_1","title":"Description","text":"<p>This method must be overridden by every extension.</p>"},{"location":"api/jetblack_markdown.autodoc/#parameters_2","title":"Parameters","text":"md: Markdown<p>The Markdown instance.</p>"},{"location":"api/jetblack_markdown.metadata/","title":"jetblack_markdown.metadata","text":""},{"location":"api/jetblack_markdown.metadata/#module-jetblack_markdownmetadata","title":"module jetblack_markdown.metadata","text":""},{"location":"api/jetblack_markdown.metadata/#summary","title":"Summary","text":"<p>Meta data</p>"},{"location":"api/jetblack_markdown.metadata/#class-argumentdescriptordescriptor","title":"class ArgumentDescriptor(Descriptor)","text":""},{"location":"api/jetblack_markdown.metadata/#summary_1","title":"Summary","text":"<p>A descriptor for arguments</p> jetblack_markdown.metadata.ArgumentDescriptor( name: str, type_: Optional[str], description: Optional[str], default: Optional[str] ) -&gt; None"},{"location":"api/jetblack_markdown.metadata/#parameters","title":"Parameters","text":"name: str<p>The argument name</p> type_: Optional[str]<p>The argument type</p> description: Optional[str]<p>The arguments description</p> default: Optional[str] (optional)<p>The default value. Defaults to ARG_DESCRIPTOR_EMPTY.</p>"},{"location":"api/jetblack_markdown.metadata/#property-argumentdescriptordescriptor_type","title":"property ArgumentDescriptor.descriptor_type","text":""},{"location":"api/jetblack_markdown.metadata/#summary_2","title":"Summary","text":"<p>The descriptor type</p> descriptor_type -&gt; str"},{"location":"api/jetblack_markdown.metadata/#property-argumentdescriptoris_optional","title":"property ArgumentDescriptor.is_optional","text":""},{"location":"api/jetblack_markdown.metadata/#summary_3","title":"Summary","text":"<p>Indicates whether the argument is optional</p> is_optional -&gt; bool"},{"location":"api/jetblack_markdown.metadata/#description","title":"Description","text":"<p>Note that an argument is optional if it has a default value, not if it has the Optional[...] type decoration.</p>"},{"location":"api/jetblack_markdown.metadata/#class-callabledescriptordescriptor","title":"class CallableDescriptor(Descriptor)","text":""},{"location":"api/jetblack_markdown.metadata/#summary_4","title":"Summary","text":"<p>A descriptor for a callable</p> jetblack_markdown.metadata.CallableDescriptor( qualifier: str, name: str, summary: Optional[str], description: Optional[str], arguments: List[ArgumentDescriptor], return_type: str, return_description: Optional[str], callable_type: CallableType, is_async: bool, is_generator: bool, raises: Optional[List[RaisesDescriptor]], examples: Optional[List[str]], module: str, package: Optional[str], file: Optional[str] ) -&gt; None"},{"location":"api/jetblack_markdown.metadata/#parameters_1","title":"Parameters","text":"qualifier: str<p>The qualifier part of the name</p> name: str<p>The name of the callable</p> summary: Optional[str]<p>The callables summary docstring</p> description: Optional[str]<p>The callables description docstring</p> arguments: List[ArgumentDescriptor]<p>The callables arguments</p> return_type: str<p>The callables return type</p> return_description: Optional[str]<p>The callables return description</p> callable_type: CallableType<p>The type of callable</p> is_async: bool<p>True if the callable is async</p> is_generator: bool<p>True if the callable is a generator</p> raises: Optional[List[RaisesDescriptor]]<p>A list of the exceptions raised</p> examples: Optional[List[str]]<p>A list of examples</p> module: str<p>The module name</p> package: Optional[str]<p>The package name</p> file: Optional[str]<p>The file name</p>"},{"location":"api/jetblack_markdown.metadata/#property-callabledescriptorcallable_type_description","title":"property CallableDescriptor.callable_type_description","text":""},{"location":"api/jetblack_markdown.metadata/#summary_5","title":"Summary","text":"<p>The function type name.</p> callable_type_description -&gt; str"},{"location":"api/jetblack_markdown.metadata/#description_1","title":"Description","text":"<p>One of: 'class', 'method', 'async generator function' 'generator function', 'function'</p>"},{"location":"api/jetblack_markdown.metadata/#property-callabledescriptordescriptor_type","title":"property CallableDescriptor.descriptor_type","text":""},{"location":"api/jetblack_markdown.metadata/#summary_6","title":"Summary","text":"<p>The descriptor type</p> descriptor_type -&gt; str"},{"location":"api/jetblack_markdown.metadata/#class-method-callabledescriptorcreate","title":"class method CallableDescriptor.create","text":""},{"location":"api/jetblack_markdown.metadata/#summary_7","title":"Summary","text":"<p>Create a callable descriptor from a callable</p> CallableDescriptor.create( signature: Optional[Signature], docstring: Optional[Docstring], callable_type: CallableType, prefer_docstring: bool, qualifier: Optional[str] ) -&gt; CallableDescriptor"},{"location":"api/jetblack_markdown.metadata/#parameters_2","title":"Parameters","text":"signature: Optional[Signature] (optional)<p>The signature. Defaults to None.</p> docstring: Optional[Docstring] (optional)<p>The docstring. Defaults to None.</p> callable_type: CallableType (optional)<p>The function type. Defaults to CallableType.FUNCTION.</p> prefer_docstring: bool (optional)<p>If true prefer the docstring.</p> qualifier: Optional[str] (optional)<p>An overload for the qualifier. Defaults to None.</p>"},{"location":"api/jetblack_markdown.metadata/#returns","title":"Returns","text":"CallableDescriptor:  A callable descriptor"},{"location":"api/jetblack_markdown.metadata/#class-callabletypeenum","title":"class CallableType(Enum)","text":""},{"location":"api/jetblack_markdown.metadata/#summary_8","title":"Summary","text":"<p>An enum indicating the type of a callable</p> jetblack_markdown.metadata.CallableType( value: Any, names: Any, *, module: Any, qualname: Any, type: Any, start: Any ) -&gt; None"},{"location":"api/jetblack_markdown.metadata/#parameters_3","title":"Parameters","text":"value: Any names: Any (optional) module: Any (optional) qualname: Any (optional) type: Any (optional) start: Any (optional)"},{"location":"api/jetblack_markdown.metadata/#class-classdescriptordescriptor","title":"class ClassDescriptor(Descriptor)","text":""},{"location":"api/jetblack_markdown.metadata/#summary_9","title":"Summary","text":"<p>A class descriptor</p> jetblack_markdown.metadata.ClassDescriptor( name: str, summary: Optional[str], description: Optional[str], constructor: Optional[CallableDescriptor], attributes: List[ArgumentDescriptor], properties: List[PropertyDescriptor], class_methods: List[CallableDescriptor], methods: List[CallableDescriptor], examples: Optional[List[str]], module: str, package: Optional[str], file: Optional[str], bases: List[ClassDescription] ) -&gt; None"},{"location":"api/jetblack_markdown.metadata/#parameters_4","title":"Parameters","text":"name: str<p>The class name</p> summary: Optional[str]<p>The docstring summary</p> description: Optional[str]<p>The docstring description</p> constructor: Optional[CallableDescriptor]<p>The constructor</p> attributes: List[ArgumentDescriptor]<p>The class attributes</p> properties: List[PropertyDescriptor]<p>The class properties</p> class_methods: List[CallableDescriptor]<p>The class methods</p> methods: List[CallableDescriptor]<p>The class methods</p> examples: Optional[List[str]]<p>Examples from the docstring</p> module: str<p>The module</p> package: Optional[str]<p>The package</p> file: Optional[str]<p>The file,</p> bases: List[ClassDescription]<p>The base classes</p>"},{"location":"api/jetblack_markdown.metadata/#property-classdescriptordescriptor_type","title":"property ClassDescriptor.descriptor_type","text":""},{"location":"api/jetblack_markdown.metadata/#summary_10","title":"Summary","text":"<p>The descriptor type</p> descriptor_type -&gt; str"},{"location":"api/jetblack_markdown.metadata/#class-method-classdescriptorcreate","title":"class method ClassDescriptor.create","text":""},{"location":"api/jetblack_markdown.metadata/#summary_11","title":"Summary","text":"<p>Create a class</p> ClassDescriptor.create( class_from_init: bool, ignore_dunder: bool, ignore_private: bool, ignore_inherited: bool, importing_module: Optional[str], prefer_docstring: bool ) -&gt; ClassDescriptor"},{"location":"api/jetblack_markdown.metadata/#parameters_5","title":"Parameters","text":"class_from_init: bool<p>If True take the docstring from the init function</p> ignore_dunder: bool<p>If True ignore __XXX__ functions</p> ignore_private: bool<p>If True ignore private methods (those prefixed _XXX)</p> ignore_inherited: bool<p>If True ignore inherited methods</p> importing_module: Optional[str] (optional)<p>The importing module, defaults to None</p> prefer_docstring: bool (optional)<p>If true prefer the docstring.</p>"},{"location":"api/jetblack_markdown.metadata/#returns_1","title":"Returns","text":"ClassDescriptor:  The class descriptor"},{"location":"api/jetblack_markdown.metadata/#class-descriptor","title":"class Descriptor","text":""},{"location":"api/jetblack_markdown.metadata/#summary_12","title":"Summary","text":"<p>The descriptor base class</p> jetblack_markdown.metadata.Descriptor() -&gt; None"},{"location":"api/jetblack_markdown.metadata/#property-descriptordescriptor_type","title":"property Descriptor.descriptor_type","text":""},{"location":"api/jetblack_markdown.metadata/#summary_13","title":"Summary","text":"<p>The descriptor type</p> descriptor_type -&gt; str"},{"location":"api/jetblack_markdown.metadata/#class-moduledescriptordescriptor","title":"class ModuleDescriptor(Descriptor)","text":""},{"location":"api/jetblack_markdown.metadata/#summary_14","title":"Summary","text":"<p>A module descriptor</p> jetblack_markdown.metadata.ModuleDescriptor( name: str, summary: Optional[str], description: Optional[str], attributes: List[ArgumentDescriptor], examples: Optional[List[str]], package: Optional[str], file: Optional[str], classes: List[ClassDescriptor], functions: List[CallableDescriptor], modules: List[ModuleDescriptor] ) -&gt; None"},{"location":"api/jetblack_markdown.metadata/#parameters_6","title":"Parameters","text":"name: str<p>The module name</p> summary: Optional[str]<p>The module summary</p> description: Optional[str]<p>The module description</p> attributes: List[ArgumentDescriptor]<p>The attribute list</p> examples: Optional[List[str]]<p>Examples from the docstring</p> package: Optional[str]<p>The package name</p> file: Optional[str]<p>The file name</p> classes: List[ClassDescriptor]<p>Classes in the module</p> functions: List[CallableDescriptor]<p>Functions in the module</p> modules: List[ModuleDescriptor]<p>The child modules</p>"},{"location":"api/jetblack_markdown.metadata/#property-moduledescriptordescriptor_type","title":"property ModuleDescriptor.descriptor_type","text":""},{"location":"api/jetblack_markdown.metadata/#summary_15","title":"Summary","text":"<p>The descriptor type</p> descriptor_type -&gt; str"},{"location":"api/jetblack_markdown.metadata/#class-method-moduledescriptorcreate","title":"class method ModuleDescriptor.create","text":""},{"location":"api/jetblack_markdown.metadata/#summary_16","title":"Summary","text":"<p>Create a module descriptor</p> ModuleDescriptor.create( class_from_init: bool, ignore_dunder: bool, ignore_private: bool, ignore_all: bool, ignore_inherited: bool, prefer_docstring: bool, follow_module_tree: bool ) -&gt; ModuleDescriptor"},{"location":"api/jetblack_markdown.metadata/#parameters_7","title":"Parameters","text":"class_from_init: bool<p>If True take the docstring from the init function</p> ignore_dunder: bool<p>If True ignore __XXX__ functions</p> ignore_private: bool<p>If True ignore private methods (those prefixed _XXX)</p> ignore_all: bool<p>If True ignore the __all__ member.</p> ignore_inherited: bool<p></p> prefer_docstring: bool<p>If true prefer the docstring</p> follow_module_tree: bool<p>If true follow the module tree</p>"},{"location":"api/jetblack_markdown.metadata/#returns_2","title":"Returns","text":"ModuleDescriptor:  A module descriptor"},{"location":"api/jetblack_markdown.metadata/#class-propertydescriptordescriptor","title":"class PropertyDescriptor(Descriptor)","text":""},{"location":"api/jetblack_markdown.metadata/#summary_17","title":"Summary","text":"<p>A properties descriptor</p> jetblack_markdown.metadata.PropertyDescriptor( qualifier: str, name: str, summary: Optional[str], description: Optional[str], type_: Optional[str], is_settable: bool, is_deletable: bool, raises: Optional[List[RaisesDescriptor]], examples: Optional[List[str]] ) -&gt; None"},{"location":"api/jetblack_markdown.metadata/#parameters_8","title":"Parameters","text":"qualifier: str<p>The qualifier</p> name: str<p>The property name</p> summary: Optional[str]<p>The summary from the docstring</p> description: Optional[str]<p>The description from the docstring</p> type_: Optional[str]<p>The property type</p> is_settable: bool<p>If True the property can be set</p> is_deletable: bool<p>If True the property can be deleted</p> raises: Optional[List[RaisesDescriptor]]<p>A list of the exceptions the property might raise.</p> examples: Optional[List[str]]<p>A list of examples from the docstring</p>"},{"location":"api/jetblack_markdown.metadata/#property-propertydescriptordescriptor_type","title":"property PropertyDescriptor.descriptor_type","text":""},{"location":"api/jetblack_markdown.metadata/#summary_18","title":"Summary","text":"<p>The descriptor type</p> descriptor_type -&gt; str"},{"location":"api/jetblack_markdown.metadata/#class-method-propertydescriptorcreate","title":"class method PropertyDescriptor.create","text":""},{"location":"api/jetblack_markdown.metadata/#summary_19","title":"Summary","text":"<p>Create a property descriptor from</p> PropertyDescriptor.create( klass: Any, property_name: str ) -&gt; PropertyDescriptor"},{"location":"api/jetblack_markdown.metadata/#parameters_9","title":"Parameters","text":"klass: Any<p>The class object</p> property_name: str<p>The name of the property</p>"},{"location":"api/jetblack_markdown.metadata/#returns_3","title":"Returns","text":"PropertyDescriptor:  A property descriptor"},{"location":"api/jetblack_markdown.metadata/#class-raisesdescriptordescriptor","title":"class RaisesDescriptor(Descriptor)","text":""},{"location":"api/jetblack_markdown.metadata/#summary_20","title":"Summary","text":"<p>A raises descriptor</p> jetblack_markdown.metadata.RaisesDescriptor( type_: str, description: str ) -&gt; None"},{"location":"api/jetblack_markdown.metadata/#parameters_10","title":"Parameters","text":"type_: str<p>The type of exception raised</p> description: str<p>The exception description</p>"},{"location":"api/jetblack_markdown.metadata/#property-raisesdescriptordescriptor_type","title":"property RaisesDescriptor.descriptor_type","text":""},{"location":"api/jetblack_markdown.metadata/#summary_21","title":"Summary","text":"<p>The descriptor type</p> descriptor_type -&gt; str"},{"location":"user-guide/config/","title":"Configuration","text":"<p>The configuration parameters can be specified in the <code>mkdocs.yml</code> file:</p> <pre><code>markdown_extensions:\n  - admonition\n  - codehilite\n  - jetblack_markdown.autodoc:\n      class_from_init: true\n      ignore_dunder: true\n      ignore_private: true\n      ignore_all: false\n      prefer_docstring: true\n      template_file: black.jinja2\n      template_folder: /usr/local/share/jetblack-markdown\n</code></pre>"},{"location":"user-guide/config/#class_from_init-bool-optional-true","title":"class_from_init (bool, optional) = <code>true</code>","text":"<p>If <code>true</code> use the docstring from the __init__ function for classes when generating the documentation for the constructor; otherwise use the docstring from the class. e.g.</p> <pre><code>class MyClass:\n    \"\"\"A simple class.\n\n    If class_from_init == false use this docstring.\n\n    Arguments:\n        name (str): The name\n    \"\"\"\n\n    def __init__(self, name: str):\n        \"\"\"A simple class.\n\n        If class_from_init == true use this docstring.\n\n        Arguments:\n            name (str): The name\n\n        self.name = name\n</code></pre>"},{"location":"user-guide/config/#ignore_dunder-bool-optional-true","title":"ignore_dunder (bool, optional) = <code>true</code>","text":"<p>If <code>true</code> ignore __XXX__ functions.</p>"},{"location":"user-guide/config/#ignore_private-bool-optional-true","title":"ignore_private (bool, optional) = <code>true</code>","text":"<p>If <code>true</code> ignore methods (those prefixed _XXX).</p>"},{"location":"user-guide/config/#ignore_all-bool-optional-false","title":"ignore_all (bool, optional) = <code>false</code>","text":"<p>If <code>false</code> use the __all__ member to constrain which objects are documented.</p>"},{"location":"user-guide/config/#ignore_inherited-bool-optional-true","title":"ignore_inherited (bool, optional) = <code>true</code>","text":"<p>If <code>true</code> ignore inherited members.</p>"},{"location":"user-guide/config/#prefer_docstring-bool-optional-true","title":"prefer_docstring (bool, optional) = <code>true</code>","text":"<p>If <code>true</code> prefer the docstring over the typing and inspection. This can be useful in reducing the verboseness of the output, and providing symbolic defaults rather than literal defaults. e.g.</p> <pre><code>SomeType = Optional[Union[str, int]]\nSOME_DEFAULT = \"This is not a test\"\n\ndef some_func(arg: SomeType = SOME_DEFAULT) -&gt; None:\n    \"\"\"Some function\n\n    Arguments:\n        arg (SomeType): an argument\n    \"\"\"\n    pass\n</code></pre> <p>If <code>prefer_docstring</code> is <code>true</code> this would provide:</p> <pre><code>def some_func(arg: SomeType = SOME_DEFAULT) -&gt; None:\n</code></pre> <p>But if <code>prefer_docstring</code> is <code>false</code>:</p> <pre><code>def some_func(arg: Union[str, int, NoneType] = \"This is not a test\") -&gt; None:\n</code></pre>"},{"location":"user-guide/config/#follow_module_tree-bool-optional-false","title":"follow_module_tree (bool, optional) = <code>false</code>","text":"<p>If <code>true</code> explore the module tree javadoc style. This is most useful when combined with <code>ignore_all</code> = <code>false</code>.</p>"},{"location":"user-guide/config/#template_file-optionalstr-optional-mainjinja2","title":"template_file (Optional[str], optional) = <code>\"main.jinja2\"</code>","text":"<p>The name of the template file to run.</p>"},{"location":"user-guide/config/#template_folder-optionalstr-optional-none","title":"template_folder (Optional[str], optional) = <code>None</code>","text":"<p>The folder in which the templates can be found. If this is not specified the built in templates are used.</p>"},{"location":"user-guide/docstrings/","title":"Docstrings","text":"<p>The automatic documentation will use docstrings do enhance the documentation. As this is a markdown extension, markdown an be used in the docstrings.</p> <pre><code>def makeExtension(*args, **kwargs) -&gt; Extension:\n    \"\"\"Make the extension\n\n    This hook *function* gets picked up by the markdown processor when the\n    extension is listed\n\n    ```python\n    output = markdown.markdown(\n        content, extensions=[\n            \"admonition\",\n            \"codehilite\",\n            \"jetblack_markdown.autodoc\",\n        ])\n    print(output)\n    ```\n\n    Returns:\n        Extension: The extension\n    \"\"\"\n    return AutodocExtension(*args, **kwargs)\n</code></pre> <p>Note the markdown on <code>function</code>, and the python code block.</p> <p>Docstrings are parsed with the docstrings_parser. This has been tested only with Google style docstrings.</p>"},{"location":"user-guide/docstrings/#escaping-markdown","title":"Escaping markdown","text":"<p>To escape markdown, use the html entity surrounded by the <code>&lt;span&gt;</code> tag.</p> <pre><code>The dunder init: &lt;span&gt;&amp;#95;&amp;#95;&lt;/span&gt;XXX&lt;span&gt;&amp;#95;&amp;#95;&lt;/span&gt;\n</code></pre> <p>The dunder init: __XXX__</p>"},{"location":"user-guide/styling/","title":"Styling","text":"<p>When using the standard templates the following styles are recommended.</p> <pre><code>span.autodoc-vartype {\n    color: #c53204;\n}\n\nvar.autodoc-varname {\n    color: #4b9e48;\n}\n\nh3.autodoc-title {\n    font-weight: bold;\n}\n\nh4.autodoc-title {\n    font-weight: bold;\n}\n\n.autodoc-qualifier {\n    font-weight: normal;\n}\n\n.autodoc-argument {\n    text-indent: 4em;\n}\n\n.autodoc-signature, .autodoc-property {\n    font-family: \"Roboto Mono\",\"Courier New\",Courier,monospace;\n}\n</code></pre>"},{"location":"user-guide/templates/","title":"Templates","text":"<p>Jinja2 templating is used to render the documentation.</p>"},{"location":"user-guide/templates/#the-entry-point","title":"The entry point","text":"<p>The template file is passed an <code>obj</code> parameter which is of type <code>jetblack_markdown.metadata.Descriptor</code>. The descriptor has a type property. The default template file looks like this:</p> <pre><code>{% import 'macros.jinja2' as macros with context %}\n{% if obj.descriptor_type == \"module\" %}\n{{ macros.render_module(obj) }}\n{% elif obj.descriptor_type == \"class\" %}\n{{ macros.render_class(obj) }}\n{% elif obj.descriptor_type == \"callable\" %}\n{{ macros.render_callable(obj) }}\n{% endif %}\n</code></pre> <p>It renders the appropriate template by checking the type of the descriptor and then calling a macro.</p>"},{"location":"user-guide/templates/#a-renderer","title":"A renderer","text":"<p>Here's a simple render macro for rendering the \"Summary\" which is usually the long description from the docstring.</p> <pre><code>{% macro render_summary(summary) -%}\n{% if summary -%}\n  &lt;h4 class=\"autodoc-title\"&gt;Summary&lt;/h4&gt;\n  {{ summary | md_format }}\n{%- endif %}\n{%- endmacro %}\n</code></pre> <p>First it checks if the long description has been specified. If it has it renders it as a level 4 heading with the class <code>autodoc-title</code>. Finally it uses a built in custom filter to convert the docstring to markdown. The custom filter will generate it's contents in a <code>&lt;p&gt; ... &lt;/p&gt;</code> block.</p> <p>Here's a more complex example of rendering a signature.</p> <pre><code>{% macro render_signature(callable) -%}\n&lt;code class=\"autodoc-signature\"&gt;\n    {%- if callable.is_async -%}\n    &lt;span class=\"autodoc-keyword\"&gt;async&lt;/span&gt;&lt;span&gt; &lt;/span&gt;\n    {%- endif -%}\n    &lt;span class=\"autodoc-qualifier\"&gt;{{ callable.qualifier }}&lt;/span&gt;&lt;span class=\"autodoc-punctuation\"&gt;.&lt;/span&gt;&lt;var class=\"autodoc-varname\"&gt;{{ callable.name }}&lt;/var&gt;&lt;span class=\"autodoc-punctuation\"&gt;(&lt;/span&gt;\n    {%- for arg in callable.arguments -%}\n      {%- if not loop.first -%}\n        &lt;span class=\"autodoc-punctuation\"&gt;, &lt;/span&gt;\n      {%- endif -%}\n      &lt;var class=\"autodoc-varname\"&gt;{{ arg.name }}&lt;/var&gt;\n      {%- if arg.type -%}\n        &lt;span class=\"autodoc-punctuation\"&gt;: &lt;/span&gt;&lt;span class=\"autodoc-vartype\"&gt;{{ arg.type }}&lt;/span&gt;\n      {%- endif -%}\n    {%- endfor -%}\n    &lt;span class=\"autodoc-punctuation\"&gt;)&lt;/span&gt;\n    {%- if return_type -%}\n      &lt;span class=\"autodoc-punctuation\"&gt; -&amp;gt; &lt;/span&gt;&lt;span class=\"autodoc-vartype\"&gt;{{ return_type }}&lt;/span&gt;\n    {%- endif -%}\n&lt;/code&gt;\n{%- endmacro %}\n</code></pre>"},{"location":"user-guide/templates/#the-md_format-filter","title":"The md_format filter","text":"<p>A custom filter <code>md_format</code> has been provided to process code that may contain markdown, such as the summary.</p> <p>Here's an example of its use.</p> <pre><code>{% macro render_summary(summary) -%}\n{% if summary -%}\n  &lt;h4 class=\"autodoc-title\"&gt;Summary&lt;/h4&gt;\n  {{ summary | md_format }}\n{%- endif %}\n{%- endmacro %}\n</code></pre>"}]}