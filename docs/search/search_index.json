{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome Markdown extensions for mkdocs . Markdown Extension A markdown extension is provided for automatically documenting python code. Modules are referred to as follows: # A Top Level Module @[jetblack_markdown] # A Package @[jetblack_markdown.autodoc] # A function @[jetblack_markdown.autodoc:makeExtension] # A class @[jetblack_markdown.autodoc.metadata:PropertyDescriptor] mkdocs integration This site was generated using mkdocs and the following config: site_name: jetblack-markdown docs_dir: documentation site_dir: docs markdown_extensions: - admonition - codehilite - jetblack_markdown.autodoc: class_from_init: true ignore_dunder: true ignore_private: true ignore_all: false ignore_inherited: true prefer_docstring: true template_folder: null extra_css: - css/custom.css Customizing All the rendering is done with jinja2 templates. Start by copying the current templates from jetblack_markdown/templates and specify the template_folder in the mkdocs.yml .","title":"Welcome"},{"location":"#welcome","text":"Markdown extensions for mkdocs .","title":"Welcome"},{"location":"#markdown-extension","text":"A markdown extension is provided for automatically documenting python code. Modules are referred to as follows: # A Top Level Module @[jetblack_markdown] # A Package @[jetblack_markdown.autodoc] # A function @[jetblack_markdown.autodoc:makeExtension] # A class @[jetblack_markdown.autodoc.metadata:PropertyDescriptor]","title":"Markdown Extension"},{"location":"#mkdocs-integration","text":"This site was generated using mkdocs and the following config: site_name: jetblack-markdown docs_dir: documentation site_dir: docs markdown_extensions: - admonition - codehilite - jetblack_markdown.autodoc: class_from_init: true ignore_dunder: true ignore_private: true ignore_all: false ignore_inherited: true prefer_docstring: true template_folder: null extra_css: - css/custom.css","title":"mkdocs integration"},{"location":"#customizing","text":"All the rendering is done with jinja2 templates. Start by copying the current templates from jetblack_markdown/templates and specify the template_folder in the mkdocs.yml .","title":"Customizing"},{"location":"api/jetblack_autodoc/","text":"autodoc module jetblack_markdown.autodoc Package: jetblack_markdown File: jetblack_markdown/autodoc.py Summary A markdown extension for creating documentation Description A markdown extension for creating documentation function jetblack_markdown . makeExtension Module: jetblack_markdown.autodoc Package: jetblack_markdown File: jetblack_markdown/autodoc.py Summary Make the extension jetblack_markdown . makeExtension ( *args , **kwargs ) Parameters *args (optional) **kwargs (optional) Returns Extension : The extension Description This hook function gets picked up by the markdown processor when the extension is listed output = markdown.markdown( content, extensions=[ \"admonition\", \"codehilite\", \"jetblack_markdown.autodoc\", ]) print(output) class AutodocExtension ( Extension ) Module: jetblack_markdown.autodoc Package: jetblack_markdown File: jetblack_markdown/autodoc.py Summary Initiate Extension and set up configs. jetblack_markdown . AutodocExtension ( **kwargs ) Parameters **kwargs (optional) method AutodocExtension . extendMarkdown Module: jetblack_markdown.autodoc Package: jetblack_markdown File: jetblack_markdown/autodoc.py Summary Add the various proccesors and patterns to the Markdown Instance. AutodocExtension . extendMarkdown ( md : Markdown ) Parameters md : Markdown (optional) Returns Any : Description This method must be overriden by every extension. Keyword arguments: md: The Markdown instance. md_globals: Global variables in the markdown module namespace. method AutodocExtension . getConfig Module: markdown.extensions Package: markdown.extensions File: markdown/extensions/ init .py Summary Return a setting for the given key or an empty string. AutodocExtension . getConfig ( key : Any , default : Any ) Parameters key : Any (optional) default : Any Returns Any : method AutodocExtension . getConfigInfo Module: markdown.extensions Package: markdown.extensions File: markdown/extensions/ init .py Summary Return all config descriptions as a list of tuples. AutodocExtension . getConfigInfo ( ) Parameters Returns Any : method AutodocExtension . getConfigs Module: markdown.extensions Package: markdown.extensions File: markdown/extensions/ init .py Summary Return all configs settings as a dict. AutodocExtension . getConfigs ( ) Parameters Returns Any : method AutodocExtension . setConfig Module: markdown.extensions Package: markdown.extensions File: markdown/extensions/ init .py Summary Set a config setting for key with the given value . AutodocExtension . setConfig ( key : Any , value : Any ) Parameters key : Any (optional) value : Any (optional) Returns Any : method AutodocExtension . setConfigs Module: markdown.extensions Package: markdown.extensions File: markdown/extensions/ init .py Summary Set multiple config settings given a dict or list of tuples. AutodocExtension . setConfigs ( items : Any ) Parameters items : Any (optional) Returns Any :","title":"jetblack-autodoc"},{"location":"api/jetblack_autodoc/#autodoc","text":"","title":"autodoc"},{"location":"api/jetblack_autodoc/#module-jetblack_markdownautodoc","text":"Package: jetblack_markdown File: jetblack_markdown/autodoc.py","title":"module jetblack_markdown.autodoc"},{"location":"api/jetblack_autodoc/#summary","text":"A markdown extension for creating documentation","title":"Summary"},{"location":"api/jetblack_autodoc/#description","text":"A markdown extension for creating documentation","title":"Description"},{"location":"api/jetblack_autodoc/#function-jetblack_markdownmakeextension","text":"Module: jetblack_markdown.autodoc Package: jetblack_markdown File: jetblack_markdown/autodoc.py","title":"function jetblack_markdown.makeExtension"},{"location":"api/jetblack_autodoc/#summary_1","text":"Make the extension jetblack_markdown . makeExtension ( *args , **kwargs )","title":"Summary"},{"location":"api/jetblack_autodoc/#parameters","text":"*args (optional) **kwargs (optional)","title":"Parameters"},{"location":"api/jetblack_autodoc/#returns","text":"Extension : The extension","title":"Returns"},{"location":"api/jetblack_autodoc/#description_1","text":"This hook function gets picked up by the markdown processor when the extension is listed output = markdown.markdown( content, extensions=[ \"admonition\", \"codehilite\", \"jetblack_markdown.autodoc\", ]) print(output)","title":"Description"},{"location":"api/jetblack_autodoc/#class-autodocextensionextension","text":"Module: jetblack_markdown.autodoc Package: jetblack_markdown File: jetblack_markdown/autodoc.py","title":"class AutodocExtension(Extension)"},{"location":"api/jetblack_autodoc/#summary_2","text":"Initiate Extension and set up configs. jetblack_markdown . AutodocExtension ( **kwargs )","title":"Summary"},{"location":"api/jetblack_autodoc/#parameters_1","text":"**kwargs (optional)","title":"Parameters"},{"location":"api/jetblack_autodoc/#method-autodocextensionextendmarkdown","text":"Module: jetblack_markdown.autodoc Package: jetblack_markdown File: jetblack_markdown/autodoc.py","title":"method AutodocExtension.extendMarkdown"},{"location":"api/jetblack_autodoc/#summary_3","text":"Add the various proccesors and patterns to the Markdown Instance. AutodocExtension . extendMarkdown ( md : Markdown )","title":"Summary"},{"location":"api/jetblack_autodoc/#parameters_2","text":"md : Markdown (optional)","title":"Parameters"},{"location":"api/jetblack_autodoc/#returns_1","text":"Any :","title":"Returns"},{"location":"api/jetblack_autodoc/#description_2","text":"This method must be overriden by every extension. Keyword arguments: md: The Markdown instance. md_globals: Global variables in the markdown module namespace.","title":"Description"},{"location":"api/jetblack_autodoc/#method-autodocextensiongetconfig","text":"Module: markdown.extensions Package: markdown.extensions File: markdown/extensions/ init .py","title":"method AutodocExtension.getConfig"},{"location":"api/jetblack_autodoc/#summary_4","text":"Return a setting for the given key or an empty string. AutodocExtension . getConfig ( key : Any , default : Any )","title":"Summary"},{"location":"api/jetblack_autodoc/#parameters_3","text":"key : Any (optional) default : Any","title":"Parameters"},{"location":"api/jetblack_autodoc/#returns_2","text":"Any :","title":"Returns"},{"location":"api/jetblack_autodoc/#method-autodocextensiongetconfiginfo","text":"Module: markdown.extensions Package: markdown.extensions File: markdown/extensions/ init .py","title":"method AutodocExtension.getConfigInfo"},{"location":"api/jetblack_autodoc/#summary_5","text":"Return all config descriptions as a list of tuples. AutodocExtension . getConfigInfo ( )","title":"Summary"},{"location":"api/jetblack_autodoc/#parameters_4","text":"","title":"Parameters"},{"location":"api/jetblack_autodoc/#returns_3","text":"Any :","title":"Returns"},{"location":"api/jetblack_autodoc/#method-autodocextensiongetconfigs","text":"Module: markdown.extensions Package: markdown.extensions File: markdown/extensions/ init .py","title":"method AutodocExtension.getConfigs"},{"location":"api/jetblack_autodoc/#summary_6","text":"Return all configs settings as a dict. AutodocExtension . getConfigs ( )","title":"Summary"},{"location":"api/jetblack_autodoc/#parameters_5","text":"","title":"Parameters"},{"location":"api/jetblack_autodoc/#returns_4","text":"Any :","title":"Returns"},{"location":"api/jetblack_autodoc/#method-autodocextensionsetconfig","text":"Module: markdown.extensions Package: markdown.extensions File: markdown/extensions/ init .py","title":"method AutodocExtension.setConfig"},{"location":"api/jetblack_autodoc/#summary_7","text":"Set a config setting for key with the given value . AutodocExtension . setConfig ( key : Any , value : Any )","title":"Summary"},{"location":"api/jetblack_autodoc/#parameters_6","text":"key : Any (optional) value : Any (optional)","title":"Parameters"},{"location":"api/jetblack_autodoc/#returns_5","text":"Any :","title":"Returns"},{"location":"api/jetblack_autodoc/#method-autodocextensionsetconfigs","text":"Module: markdown.extensions Package: markdown.extensions File: markdown/extensions/ init .py","title":"method AutodocExtension.setConfigs"},{"location":"api/jetblack_autodoc/#summary_8","text":"Set multiple config settings given a dict or list of tuples. AutodocExtension . setConfigs ( items : Any )","title":"Summary"},{"location":"api/jetblack_autodoc/#parameters_7","text":"items : Any (optional)","title":"Parameters"},{"location":"api/jetblack_autodoc/#returns_6","text":"Any :","title":"Returns"},{"location":"api/jetblack_markdown/","text":"markdown module jetblack_markdown Package: jetblack_markdown File: jetblack_markdown/ init .py Summary JetBlack Markdown Description JetBlack Markdown class AutodocExtension ( Extension ) Module: jetblack_markdown Package: jetblack_markdown File: jetblack_markdown/autodoc.py Summary Initiate Extension and set up configs. jetblack_markdown . AutodocExtension ( **kwargs ) Parameters **kwargs (optional) method AutodocExtension . extendMarkdown Module: jetblack_markdown.autodoc Package: jetblack_markdown File: jetblack_markdown/autodoc.py Summary Add the various proccesors and patterns to the Markdown Instance. AutodocExtension . extendMarkdown ( md : Markdown ) Parameters md : Markdown (optional) Returns Any : Description This method must be overriden by every extension. Keyword arguments: md: The Markdown instance. md_globals: Global variables in the markdown module namespace. method AutodocExtension . getConfig Module: markdown.extensions Package: markdown.extensions File: markdown/extensions/ init .py Summary Return a setting for the given key or an empty string. AutodocExtension . getConfig ( key : Any , default : Any ) Parameters key : Any (optional) default : Any Returns Any : method AutodocExtension . getConfigInfo Module: markdown.extensions Package: markdown.extensions File: markdown/extensions/ init .py Summary Return all config descriptions as a list of tuples. AutodocExtension . getConfigInfo ( ) Parameters Returns Any : method AutodocExtension . getConfigs Module: markdown.extensions Package: markdown.extensions File: markdown/extensions/ init .py Summary Return all configs settings as a dict. AutodocExtension . getConfigs ( ) Parameters Returns Any : method AutodocExtension . setConfig Module: markdown.extensions Package: markdown.extensions File: markdown/extensions/ init .py Summary Set a config setting for key with the given value . AutodocExtension . setConfig ( key : Any , value : Any ) Parameters key : Any (optional) value : Any (optional) Returns Any : method AutodocExtension . setConfigs Module: markdown.extensions Package: markdown.extensions File: markdown/extensions/ init .py Summary Set multiple config settings given a dict or list of tuples. AutodocExtension . setConfigs ( items : Any ) Parameters items : Any (optional) Returns Any : class AutodocInlineProcessor ( InlineProcessor ) Module: jetblack_markdown Package: jetblack_markdown File: jetblack_markdown/autodoc_processor.py Summary An inline processor for Python documentation jetblack_markdown . AutodocInlineProcessor ( md : Markdown , * , class_from_init : bool , ignore_dunder : bool , ignore_private : bool , ignore_all : bool , ignore_inherited : bool , prefer_docstring : bool , template_folder : Optional[str] ) Parameters md : Markdown The markdown object provided by the extension. Defaults to None. * (optional) class_from_init : bool If True use the docstring from the init function for classes. Defaults to True. ignore_dunder : bool If True ignore XXX functions. Defaults to True. ignore_private : bool If True ignore methods (those prefixed _XXX). Defaults to True. ignore_all : bool If True ignore the all member. ignore_inherited : bool If True ignore inherited members. prefer_docstring : bool If true prefer the docstring. template_folder : Optional[str] The template folder, Defaults to None. property AutodocInlineProcessor . markdown markdown -> Any method AutodocInlineProcessor . getCompiledRegExp Module: markdown.inlinepatterns Package: markdown File: markdown/inlinepatterns.py Summary Return a compiled regular expression. AutodocInlineProcessor . getCompiledRegExp ( ) Parameters Returns Any : method AutodocInlineProcessor . handleMatch Module: jetblack_markdown.autodoc_processor Package: jetblack_markdown File: jetblack_markdown/autodoc_processor.py Summary Handle a match AutodocInlineProcessor . handleMatch ( matches : re.Match , data : str ) Parameters matches : re.Match (optional) The regular expression match result data : str (optional) The matched text Returns Tuple[etree.Element, int, int] : The element to insert and the start and end index method AutodocInlineProcessor . type Module: markdown.inlinepatterns Package: markdown File: markdown/inlinepatterns.py Summary Return class name, to define pattern type AutodocInlineProcessor . type ( ) Parameters Returns Any : method AutodocInlineProcessor . unescape Module: markdown.inlinepatterns Package: markdown File: markdown/inlinepatterns.py Summary Return unescaped text given text with an inline placeholder. AutodocInlineProcessor . unescape ( text : Any ) Parameters text : Any (optional) Returns Any :","title":"jetblack_markdown.autodoc"},{"location":"api/jetblack_markdown/#markdown","text":"","title":"markdown"},{"location":"api/jetblack_markdown/#module-jetblack_markdown","text":"Package: jetblack_markdown File: jetblack_markdown/ init .py","title":"module jetblack_markdown"},{"location":"api/jetblack_markdown/#summary","text":"JetBlack Markdown","title":"Summary"},{"location":"api/jetblack_markdown/#description","text":"JetBlack Markdown","title":"Description"},{"location":"api/jetblack_markdown/#class-autodocextensionextension","text":"Module: jetblack_markdown Package: jetblack_markdown File: jetblack_markdown/autodoc.py","title":"class AutodocExtension(Extension)"},{"location":"api/jetblack_markdown/#summary_1","text":"Initiate Extension and set up configs. jetblack_markdown . AutodocExtension ( **kwargs )","title":"Summary"},{"location":"api/jetblack_markdown/#parameters","text":"**kwargs (optional)","title":"Parameters"},{"location":"api/jetblack_markdown/#method-autodocextensionextendmarkdown","text":"Module: jetblack_markdown.autodoc Package: jetblack_markdown File: jetblack_markdown/autodoc.py","title":"method AutodocExtension.extendMarkdown"},{"location":"api/jetblack_markdown/#summary_2","text":"Add the various proccesors and patterns to the Markdown Instance. AutodocExtension . extendMarkdown ( md : Markdown )","title":"Summary"},{"location":"api/jetblack_markdown/#parameters_1","text":"md : Markdown (optional)","title":"Parameters"},{"location":"api/jetblack_markdown/#returns","text":"Any :","title":"Returns"},{"location":"api/jetblack_markdown/#description_1","text":"This method must be overriden by every extension. Keyword arguments: md: The Markdown instance. md_globals: Global variables in the markdown module namespace.","title":"Description"},{"location":"api/jetblack_markdown/#method-autodocextensiongetconfig","text":"Module: markdown.extensions Package: markdown.extensions File: markdown/extensions/ init .py","title":"method AutodocExtension.getConfig"},{"location":"api/jetblack_markdown/#summary_3","text":"Return a setting for the given key or an empty string. AutodocExtension . getConfig ( key : Any , default : Any )","title":"Summary"},{"location":"api/jetblack_markdown/#parameters_2","text":"key : Any (optional) default : Any","title":"Parameters"},{"location":"api/jetblack_markdown/#returns_1","text":"Any :","title":"Returns"},{"location":"api/jetblack_markdown/#method-autodocextensiongetconfiginfo","text":"Module: markdown.extensions Package: markdown.extensions File: markdown/extensions/ init .py","title":"method AutodocExtension.getConfigInfo"},{"location":"api/jetblack_markdown/#summary_4","text":"Return all config descriptions as a list of tuples. AutodocExtension . getConfigInfo ( )","title":"Summary"},{"location":"api/jetblack_markdown/#parameters_3","text":"","title":"Parameters"},{"location":"api/jetblack_markdown/#returns_2","text":"Any :","title":"Returns"},{"location":"api/jetblack_markdown/#method-autodocextensiongetconfigs","text":"Module: markdown.extensions Package: markdown.extensions File: markdown/extensions/ init .py","title":"method AutodocExtension.getConfigs"},{"location":"api/jetblack_markdown/#summary_5","text":"Return all configs settings as a dict. AutodocExtension . getConfigs ( )","title":"Summary"},{"location":"api/jetblack_markdown/#parameters_4","text":"","title":"Parameters"},{"location":"api/jetblack_markdown/#returns_3","text":"Any :","title":"Returns"},{"location":"api/jetblack_markdown/#method-autodocextensionsetconfig","text":"Module: markdown.extensions Package: markdown.extensions File: markdown/extensions/ init .py","title":"method AutodocExtension.setConfig"},{"location":"api/jetblack_markdown/#summary_6","text":"Set a config setting for key with the given value . AutodocExtension . setConfig ( key : Any , value : Any )","title":"Summary"},{"location":"api/jetblack_markdown/#parameters_5","text":"key : Any (optional) value : Any (optional)","title":"Parameters"},{"location":"api/jetblack_markdown/#returns_4","text":"Any :","title":"Returns"},{"location":"api/jetblack_markdown/#method-autodocextensionsetconfigs","text":"Module: markdown.extensions Package: markdown.extensions File: markdown/extensions/ init .py","title":"method AutodocExtension.setConfigs"},{"location":"api/jetblack_markdown/#summary_7","text":"Set multiple config settings given a dict or list of tuples. AutodocExtension . setConfigs ( items : Any )","title":"Summary"},{"location":"api/jetblack_markdown/#parameters_6","text":"items : Any (optional)","title":"Parameters"},{"location":"api/jetblack_markdown/#returns_5","text":"Any :","title":"Returns"},{"location":"api/jetblack_markdown/#class-autodocinlineprocessorinlineprocessor","text":"Module: jetblack_markdown Package: jetblack_markdown File: jetblack_markdown/autodoc_processor.py","title":"class AutodocInlineProcessor(InlineProcessor)"},{"location":"api/jetblack_markdown/#summary_8","text":"An inline processor for Python documentation jetblack_markdown . AutodocInlineProcessor ( md : Markdown , * , class_from_init : bool , ignore_dunder : bool , ignore_private : bool , ignore_all : bool , ignore_inherited : bool , prefer_docstring : bool , template_folder : Optional[str] )","title":"Summary"},{"location":"api/jetblack_markdown/#parameters_7","text":"md : Markdown The markdown object provided by the extension. Defaults to None. * (optional) class_from_init : bool If True use the docstring from the init function for classes. Defaults to True. ignore_dunder : bool If True ignore XXX functions. Defaults to True. ignore_private : bool If True ignore methods (those prefixed _XXX). Defaults to True. ignore_all : bool If True ignore the all member. ignore_inherited : bool If True ignore inherited members. prefer_docstring : bool If true prefer the docstring. template_folder : Optional[str] The template folder, Defaults to None.","title":"Parameters"},{"location":"api/jetblack_markdown/#property-autodocinlineprocessormarkdown","text":"markdown -> Any","title":"property AutodocInlineProcessor.markdown"},{"location":"api/jetblack_markdown/#method-autodocinlineprocessorgetcompiledregexp","text":"Module: markdown.inlinepatterns Package: markdown File: markdown/inlinepatterns.py","title":"method AutodocInlineProcessor.getCompiledRegExp"},{"location":"api/jetblack_markdown/#summary_9","text":"Return a compiled regular expression. AutodocInlineProcessor . getCompiledRegExp ( )","title":"Summary"},{"location":"api/jetblack_markdown/#parameters_8","text":"","title":"Parameters"},{"location":"api/jetblack_markdown/#returns_6","text":"Any :","title":"Returns"},{"location":"api/jetblack_markdown/#method-autodocinlineprocessorhandlematch","text":"Module: jetblack_markdown.autodoc_processor Package: jetblack_markdown File: jetblack_markdown/autodoc_processor.py","title":"method AutodocInlineProcessor.handleMatch"},{"location":"api/jetblack_markdown/#summary_10","text":"Handle a match AutodocInlineProcessor . handleMatch ( matches : re.Match , data : str )","title":"Summary"},{"location":"api/jetblack_markdown/#parameters_9","text":"matches : re.Match (optional) The regular expression match result data : str (optional) The matched text","title":"Parameters"},{"location":"api/jetblack_markdown/#returns_7","text":"Tuple[etree.Element, int, int] : The element to insert and the start and end index","title":"Returns"},{"location":"api/jetblack_markdown/#method-autodocinlineprocessortype","text":"Module: markdown.inlinepatterns Package: markdown File: markdown/inlinepatterns.py","title":"method AutodocInlineProcessor.type"},{"location":"api/jetblack_markdown/#summary_11","text":"Return class name, to define pattern type AutodocInlineProcessor . type ( )","title":"Summary"},{"location":"api/jetblack_markdown/#parameters_10","text":"","title":"Parameters"},{"location":"api/jetblack_markdown/#returns_8","text":"Any :","title":"Returns"},{"location":"api/jetblack_markdown/#method-autodocinlineprocessorunescape","text":"Module: markdown.inlinepatterns Package: markdown File: markdown/inlinepatterns.py","title":"method AutodocInlineProcessor.unescape"},{"location":"api/jetblack_markdown/#summary_12","text":"Return unescaped text given text with an inline placeholder. AutodocInlineProcessor . unescape ( text : Any )","title":"Summary"},{"location":"api/jetblack_markdown/#parameters_11","text":"text : Any (optional)","title":"Parameters"},{"location":"api/jetblack_markdown/#returns_9","text":"Any :","title":"Returns"},{"location":"api/jetblack_metadata/","text":"metadata module jetblack_markdown.metadata Package: jetblack_markdown.metadata File: jetblack_markdown/metadata/ init .py Summary Meta data Description Meta data class ArgumentDescriptor ( Descriptor ) Module: jetblack_markdown.metadata Package: jetblack_markdown.metadata File: jetblack_markdown/metadata/arguments.py Summary A descriptor for arguments jetblack_markdown.metadata . ArgumentDescriptor ( type_ : Optional[str] , description : Optional[str] , default : Optional[str] ) Parameters type_ : Optional[str] (optional) The argument type description : Optional[str] (optional) The arguments description default : Optional[str] The default value. Defaults to ARG_DESCRIPTOR_EMPTY. property ArgumentDescriptor . descriptor_type Summary The descriptor type descriptor_type -> str property ArgumentDescriptor . is_optional Summary Indicates whether the argument is optional is_optional -> bool Description Note that an argument is optional if it has a default value, not if it has the Optional[...] type decoration. class CallableDescriptor ( Descriptor ) Module: jetblack_markdown.metadata Package: jetblack_markdown.metadata File: jetblack_markdown/metadata/callables.py Summary A descriptor for a callable jetblack_markdown.metadata . CallableDescriptor ( name : str , summary : Optional[str] , description : Optional[str] , arguments : List[ArgumentDescriptor] , return_type : str , return_description : Optional[str] , callable_type : CallableType , is_async : bool , is_generator : bool , raises : Optional[List[RaisesDescriptor]] , examples : Optional[List[str]] , module : str , package : Optional[str] , file : Optional[str] ) Parameters name : str (optional) The name of the callable summary : Optional[str] (optional) The callables summary docstring description : Optional[str] (optional) The callables description docstring arguments : List[ArgumentDescriptor] (optional) The callables arguments return_type : str (optional) The callables return type return_description : Optional[str] (optional) The callables return description callable_type : CallableType (optional) The type of callable is_async : bool (optional) True if the callable is async is_generator : bool (optional) True if the callable is a generator raises : Optional[List[RaisesDescriptor]] (optional) A list of the exceptions raised examples : Optional[List[str]] (optional) A list of examples module : str (optional) The module name package : Optional[str] (optional) The package name file : Optional[str] (optional) The file name property CallableDescriptor . callable_type_description Summary The function type name. callable_type_description -> str Description One of: 'class', 'method', 'async generator function' 'generator function', 'function' property CallableDescriptor . descriptor_type Summary The descriptor type descriptor_type -> str class method CallableDescriptor . create Module: jetblack_markdown.metadata.callables Package: jetblack_markdown.metadata File: jetblack_markdown/metadata/callables.py Summary Create a callable descriptor from a callable CallableDescriptor . create ( signature : Optional[Signature] , docstring : Optional[Docstring] , callable_type : CallableType , prefer_docstring : bool , qualifier : Optional[str] ) Parameters signature : Optional[Signature] The signature. Defaults to None. docstring : Optional[Docstring] The docstring. Defaults to None. callable_type : CallableType The function type. Defaults to CallableType.FUNCTION. prefer_docstring : bool If true prefer the docstring. qualifier : Optional[str] An overload for the qualifier. Defaults to None. Returns CallableDescriptor : A callable descriptor class CallableType ( Enum ) Module: jetblack_markdown.metadata Package: jetblack_markdown.metadata File: jetblack_markdown/metadata/callables.py Summary An enum indicating the type of a callable jetblack_markdown.metadata . CallableType ( names : Any , * , module : Any , qualname : Any , type : Any , start : Any ) Parameters names : Any * (optional) module : Any qualname : Any type : Any start : Any class ClassDescriptor ( Descriptor ) Module: jetblack_markdown.metadata Package: jetblack_markdown.metadata File: jetblack_markdown/metadata/classes.py Summary A class descriptor jetblack_markdown.metadata . ClassDescriptor ( summary : Optional[str] , description : Optional[str] , constructor : CallableDescriptor , attributes : List[ArgumentDescriptor] , properties : List[PropertyDescriptor] , class_methods : List[CallableDescriptor] , methods : List[CallableDescriptor] , examples : Optional[List[str]] , module : str , package : Optional[str] , file : Optional[str] , bases : List[ClassDescription] ) Parameters summary : Optional[str] (optional) The docstring summary description : Optional[str] (optional) The docstring description constructor : CallableDescriptor (optional) The constructor attributes : List[ArgumentDescriptor] (optional) The class attributes properties : List[PropertyDescriptor] (optional) The class properties class_methods : List[CallableDescriptor] (optional) The class methods methods : List[CallableDescriptor] (optional) The class methods examples : Optional[List[str]] (optional) Examples from the docstring module : str (optional) The module package : Optional[str] (optional) The package file : Optional[str] (optional) The file, bases : List[ClassDescription] (optional) The base classes property ClassDescriptor . descriptor_type Summary The descriptor type descriptor_type -> str class method ClassDescriptor . create Module: jetblack_markdown.metadata.classes Package: jetblack_markdown.metadata File: jetblack_markdown/metadata/classes.py Summary Create a class ClassDescriptor . create ( class_from_init : bool , ignore_dunder : bool , ignore_private : bool , ignore_inherited : bool , importing_module : Optional[str] , prefer_docstring : bool ) Parameters class_from_init : bool (optional) If True take the docstring from the init function ignore_dunder : bool (optional) If True ignore XXX functions ignore_private : bool (optional) If True ignore private methods (those prefixed _XXX) ignore_inherited : bool (optional) If True ignore inherited methods importing_module : Optional[str] The importing module, defaults to None prefer_docstring : bool If true prefer the docstring. Returns ClassDescriptor : The class descriptor class Descriptor Module: jetblack_markdown.metadata Package: jetblack_markdown.metadata File: jetblack_markdown/metadata/common.py Summary Initialize self. See help(type(self)) for accurate signature. jetblack_markdown.metadata . Descriptor ( ) Parameters property Descriptor . descriptor_type Summary The descriptor type descriptor_type -> str class ModuleDescriptor ( Descriptor ) Module: jetblack_markdown.metadata Package: jetblack_markdown.metadata File: jetblack_markdown/metadata/modules.py Summary A module descriptor jetblack_markdown.metadata . ModuleDescriptor ( summary : Optional[str] , description : Optional[str] , attributes : List[ArgumentDescriptor] , examples : Optional[List[str]] , package : Optional[str] , file : Optional[str] , classes : List[ClassDescriptor] , functions : List[CallableDescriptor] ) Parameters summary : Optional[str] (optional) The module summary description : Optional[str] (optional) The module description attributes : List[ArgumentDescriptor] (optional) The attribute list examples : Optional[List[str]] (optional) Examples from the docstring package : Optional[str] (optional) The package name file : Optional[str] (optional) The file name classes : List[ClassDescriptor] (optional) Classes in the module functions : List[CallableDescriptor] (optional) Functions in the module property ModuleDescriptor . descriptor_type Summary The descriptor type descriptor_type -> str class method ModuleDescriptor . create Module: jetblack_markdown.metadata.modules Package: jetblack_markdown.metadata File: jetblack_markdown/metadata/modules.py Summary Create a module descriptor ModuleDescriptor . create ( class_from_init : bool , ignore_dunder : bool , ignore_private : bool , ignore_all : bool , ignore_inherited : bool , prefer_docstring : bool ) Parameters class_from_init : bool (optional) If True take the docstring from the init function ignore_dunder : bool (optional) If True ignore __ XXX __ functions ignore_private : bool (optional) If True ignore private methods (those prefixed _XXX) ignore_all : bool (optional) If True ignore the __ all __ member. ignore_inherited : bool (optional) prefer_docstring : bool (optional) If true prefer the docstring Returns ModuleDescriptor : A module descriptor class PropertyDescriptor ( Descriptor ) Module: jetblack_markdown.metadata Package: jetblack_markdown.metadata File: jetblack_markdown/metadata/properties.py Summary A properties descriptor jetblack_markdown.metadata . PropertyDescriptor ( name : str , summary : Optional[str] , description : Optional[str] , type_ : Optional[str] , is_settable : bool , is_deletable : bool , raises : Optional[List[RaisesDescriptor]] , examples : Optional[List[str]] ) Parameters name : str (optional) The property name summary : Optional[str] (optional) The summary from the docstring description : Optional[str] (optional) The description from the docstring type_ : Optional[str] (optional) The property type is_settable : bool (optional) If True the property can be set is_deletable : bool (optional) If True the property can be deleted raises : Optional[List[RaisesDescriptor]] (optional) A list of the exceptions the property might raise. examples : Optional[List[str]] (optional) A list of examples from the docstring property PropertyDescriptor . descriptor_type Summary The descriptor type descriptor_type -> str class method PropertyDescriptor . create Module: jetblack_markdown.metadata.properties Package: jetblack_markdown.metadata File: jetblack_markdown/metadata/properties.py Summary Create a property descriptor from PropertyDescriptor . create ( klass : Any , property_name : str ) Parameters klass : Any (optional) The class object property_name : str (optional) The name of the property Returns PropertyDescriptor : A property descriptor class RaisesDescriptor ( Descriptor ) Module: jetblack_markdown.metadata Package: jetblack_markdown.metadata File: jetblack_markdown/metadata/raises.py Summary A raises descriptor jetblack_markdown.metadata . RaisesDescriptor ( description : str ) Parameters description : str (optional) The exception description property RaisesDescriptor . descriptor_type Summary The descriptor type descriptor_type -> str","title":"jetblack_markdown.metadata"},{"location":"api/jetblack_metadata/#metadata","text":"","title":"metadata"},{"location":"api/jetblack_metadata/#module-jetblack_markdownmetadata","text":"Package: jetblack_markdown.metadata File: jetblack_markdown/metadata/ init .py","title":"module jetblack_markdown.metadata"},{"location":"api/jetblack_metadata/#summary","text":"Meta data","title":"Summary"},{"location":"api/jetblack_metadata/#description","text":"Meta data","title":"Description"},{"location":"api/jetblack_metadata/#class-argumentdescriptordescriptor","text":"Module: jetblack_markdown.metadata Package: jetblack_markdown.metadata File: jetblack_markdown/metadata/arguments.py","title":"class ArgumentDescriptor(Descriptor)"},{"location":"api/jetblack_metadata/#summary_1","text":"A descriptor for arguments jetblack_markdown.metadata . ArgumentDescriptor ( type_ : Optional[str] , description : Optional[str] , default : Optional[str] )","title":"Summary"},{"location":"api/jetblack_metadata/#parameters","text":"type_ : Optional[str] (optional) The argument type description : Optional[str] (optional) The arguments description default : Optional[str] The default value. Defaults to ARG_DESCRIPTOR_EMPTY.","title":"Parameters"},{"location":"api/jetblack_metadata/#property-argumentdescriptordescriptor_type","text":"","title":"property ArgumentDescriptor.descriptor_type"},{"location":"api/jetblack_metadata/#summary_2","text":"The descriptor type descriptor_type -> str","title":"Summary"},{"location":"api/jetblack_metadata/#property-argumentdescriptoris_optional","text":"","title":"property ArgumentDescriptor.is_optional"},{"location":"api/jetblack_metadata/#summary_3","text":"Indicates whether the argument is optional is_optional -> bool","title":"Summary"},{"location":"api/jetblack_metadata/#description_1","text":"Note that an argument is optional if it has a default value, not if it has the Optional[...] type decoration.","title":"Description"},{"location":"api/jetblack_metadata/#class-callabledescriptordescriptor","text":"Module: jetblack_markdown.metadata Package: jetblack_markdown.metadata File: jetblack_markdown/metadata/callables.py","title":"class CallableDescriptor(Descriptor)"},{"location":"api/jetblack_metadata/#summary_4","text":"A descriptor for a callable jetblack_markdown.metadata . CallableDescriptor ( name : str , summary : Optional[str] , description : Optional[str] , arguments : List[ArgumentDescriptor] , return_type : str , return_description : Optional[str] , callable_type : CallableType , is_async : bool , is_generator : bool , raises : Optional[List[RaisesDescriptor]] , examples : Optional[List[str]] , module : str , package : Optional[str] , file : Optional[str] )","title":"Summary"},{"location":"api/jetblack_metadata/#parameters_1","text":"name : str (optional) The name of the callable summary : Optional[str] (optional) The callables summary docstring description : Optional[str] (optional) The callables description docstring arguments : List[ArgumentDescriptor] (optional) The callables arguments return_type : str (optional) The callables return type return_description : Optional[str] (optional) The callables return description callable_type : CallableType (optional) The type of callable is_async : bool (optional) True if the callable is async is_generator : bool (optional) True if the callable is a generator raises : Optional[List[RaisesDescriptor]] (optional) A list of the exceptions raised examples : Optional[List[str]] (optional) A list of examples module : str (optional) The module name package : Optional[str] (optional) The package name file : Optional[str] (optional) The file name","title":"Parameters"},{"location":"api/jetblack_metadata/#property-callabledescriptorcallable_type_description","text":"","title":"property CallableDescriptor.callable_type_description"},{"location":"api/jetblack_metadata/#summary_5","text":"The function type name. callable_type_description -> str","title":"Summary"},{"location":"api/jetblack_metadata/#description_2","text":"One of: 'class', 'method', 'async generator function' 'generator function', 'function'","title":"Description"},{"location":"api/jetblack_metadata/#property-callabledescriptordescriptor_type","text":"","title":"property CallableDescriptor.descriptor_type"},{"location":"api/jetblack_metadata/#summary_6","text":"The descriptor type descriptor_type -> str","title":"Summary"},{"location":"api/jetblack_metadata/#class-method-callabledescriptorcreate","text":"Module: jetblack_markdown.metadata.callables Package: jetblack_markdown.metadata File: jetblack_markdown/metadata/callables.py","title":"class method CallableDescriptor.create"},{"location":"api/jetblack_metadata/#summary_7","text":"Create a callable descriptor from a callable CallableDescriptor . create ( signature : Optional[Signature] , docstring : Optional[Docstring] , callable_type : CallableType , prefer_docstring : bool , qualifier : Optional[str] )","title":"Summary"},{"location":"api/jetblack_metadata/#parameters_2","text":"signature : Optional[Signature] The signature. Defaults to None. docstring : Optional[Docstring] The docstring. Defaults to None. callable_type : CallableType The function type. Defaults to CallableType.FUNCTION. prefer_docstring : bool If true prefer the docstring. qualifier : Optional[str] An overload for the qualifier. Defaults to None.","title":"Parameters"},{"location":"api/jetblack_metadata/#returns","text":"CallableDescriptor : A callable descriptor","title":"Returns"},{"location":"api/jetblack_metadata/#class-callabletypeenum","text":"Module: jetblack_markdown.metadata Package: jetblack_markdown.metadata File: jetblack_markdown/metadata/callables.py","title":"class CallableType(Enum)"},{"location":"api/jetblack_metadata/#summary_8","text":"An enum indicating the type of a callable jetblack_markdown.metadata . CallableType ( names : Any , * , module : Any , qualname : Any , type : Any , start : Any )","title":"Summary"},{"location":"api/jetblack_metadata/#parameters_3","text":"names : Any * (optional) module : Any qualname : Any type : Any start : Any","title":"Parameters"},{"location":"api/jetblack_metadata/#class-classdescriptordescriptor","text":"Module: jetblack_markdown.metadata Package: jetblack_markdown.metadata File: jetblack_markdown/metadata/classes.py","title":"class ClassDescriptor(Descriptor)"},{"location":"api/jetblack_metadata/#summary_9","text":"A class descriptor jetblack_markdown.metadata . ClassDescriptor ( summary : Optional[str] , description : Optional[str] , constructor : CallableDescriptor , attributes : List[ArgumentDescriptor] , properties : List[PropertyDescriptor] , class_methods : List[CallableDescriptor] , methods : List[CallableDescriptor] , examples : Optional[List[str]] , module : str , package : Optional[str] , file : Optional[str] , bases : List[ClassDescription] )","title":"Summary"},{"location":"api/jetblack_metadata/#parameters_4","text":"summary : Optional[str] (optional) The docstring summary description : Optional[str] (optional) The docstring description constructor : CallableDescriptor (optional) The constructor attributes : List[ArgumentDescriptor] (optional) The class attributes properties : List[PropertyDescriptor] (optional) The class properties class_methods : List[CallableDescriptor] (optional) The class methods methods : List[CallableDescriptor] (optional) The class methods examples : Optional[List[str]] (optional) Examples from the docstring module : str (optional) The module package : Optional[str] (optional) The package file : Optional[str] (optional) The file, bases : List[ClassDescription] (optional) The base classes","title":"Parameters"},{"location":"api/jetblack_metadata/#property-classdescriptordescriptor_type","text":"","title":"property ClassDescriptor.descriptor_type"},{"location":"api/jetblack_metadata/#summary_10","text":"The descriptor type descriptor_type -> str","title":"Summary"},{"location":"api/jetblack_metadata/#class-method-classdescriptorcreate","text":"Module: jetblack_markdown.metadata.classes Package: jetblack_markdown.metadata File: jetblack_markdown/metadata/classes.py","title":"class method ClassDescriptor.create"},{"location":"api/jetblack_metadata/#summary_11","text":"Create a class ClassDescriptor . create ( class_from_init : bool , ignore_dunder : bool , ignore_private : bool , ignore_inherited : bool , importing_module : Optional[str] , prefer_docstring : bool )","title":"Summary"},{"location":"api/jetblack_metadata/#parameters_5","text":"class_from_init : bool (optional) If True take the docstring from the init function ignore_dunder : bool (optional) If True ignore XXX functions ignore_private : bool (optional) If True ignore private methods (those prefixed _XXX) ignore_inherited : bool (optional) If True ignore inherited methods importing_module : Optional[str] The importing module, defaults to None prefer_docstring : bool If true prefer the docstring.","title":"Parameters"},{"location":"api/jetblack_metadata/#returns_1","text":"ClassDescriptor : The class descriptor","title":"Returns"},{"location":"api/jetblack_metadata/#class-descriptor","text":"Module: jetblack_markdown.metadata Package: jetblack_markdown.metadata File: jetblack_markdown/metadata/common.py","title":"class Descriptor"},{"location":"api/jetblack_metadata/#summary_12","text":"Initialize self. See help(type(self)) for accurate signature. jetblack_markdown.metadata . Descriptor ( )","title":"Summary"},{"location":"api/jetblack_metadata/#parameters_6","text":"","title":"Parameters"},{"location":"api/jetblack_metadata/#property-descriptordescriptor_type","text":"","title":"property Descriptor.descriptor_type"},{"location":"api/jetblack_metadata/#summary_13","text":"The descriptor type descriptor_type -> str","title":"Summary"},{"location":"api/jetblack_metadata/#class-moduledescriptordescriptor","text":"Module: jetblack_markdown.metadata Package: jetblack_markdown.metadata File: jetblack_markdown/metadata/modules.py","title":"class ModuleDescriptor(Descriptor)"},{"location":"api/jetblack_metadata/#summary_14","text":"A module descriptor jetblack_markdown.metadata . ModuleDescriptor ( summary : Optional[str] , description : Optional[str] , attributes : List[ArgumentDescriptor] , examples : Optional[List[str]] , package : Optional[str] , file : Optional[str] , classes : List[ClassDescriptor] , functions : List[CallableDescriptor] )","title":"Summary"},{"location":"api/jetblack_metadata/#parameters_7","text":"summary : Optional[str] (optional) The module summary description : Optional[str] (optional) The module description attributes : List[ArgumentDescriptor] (optional) The attribute list examples : Optional[List[str]] (optional) Examples from the docstring package : Optional[str] (optional) The package name file : Optional[str] (optional) The file name classes : List[ClassDescriptor] (optional) Classes in the module functions : List[CallableDescriptor] (optional) Functions in the module","title":"Parameters"},{"location":"api/jetblack_metadata/#property-moduledescriptordescriptor_type","text":"","title":"property ModuleDescriptor.descriptor_type"},{"location":"api/jetblack_metadata/#summary_15","text":"The descriptor type descriptor_type -> str","title":"Summary"},{"location":"api/jetblack_metadata/#class-method-moduledescriptorcreate","text":"Module: jetblack_markdown.metadata.modules Package: jetblack_markdown.metadata File: jetblack_markdown/metadata/modules.py","title":"class method ModuleDescriptor.create"},{"location":"api/jetblack_metadata/#summary_16","text":"Create a module descriptor ModuleDescriptor . create ( class_from_init : bool , ignore_dunder : bool , ignore_private : bool , ignore_all : bool , ignore_inherited : bool , prefer_docstring : bool )","title":"Summary"},{"location":"api/jetblack_metadata/#parameters_8","text":"class_from_init : bool (optional) If True take the docstring from the init function ignore_dunder : bool (optional) If True ignore __ XXX __ functions ignore_private : bool (optional) If True ignore private methods (those prefixed _XXX) ignore_all : bool (optional) If True ignore the __ all __ member. ignore_inherited : bool (optional) prefer_docstring : bool (optional) If true prefer the docstring","title":"Parameters"},{"location":"api/jetblack_metadata/#returns_2","text":"ModuleDescriptor : A module descriptor","title":"Returns"},{"location":"api/jetblack_metadata/#class-propertydescriptordescriptor","text":"Module: jetblack_markdown.metadata Package: jetblack_markdown.metadata File: jetblack_markdown/metadata/properties.py","title":"class PropertyDescriptor(Descriptor)"},{"location":"api/jetblack_metadata/#summary_17","text":"A properties descriptor jetblack_markdown.metadata . PropertyDescriptor ( name : str , summary : Optional[str] , description : Optional[str] , type_ : Optional[str] , is_settable : bool , is_deletable : bool , raises : Optional[List[RaisesDescriptor]] , examples : Optional[List[str]] )","title":"Summary"},{"location":"api/jetblack_metadata/#parameters_9","text":"name : str (optional) The property name summary : Optional[str] (optional) The summary from the docstring description : Optional[str] (optional) The description from the docstring type_ : Optional[str] (optional) The property type is_settable : bool (optional) If True the property can be set is_deletable : bool (optional) If True the property can be deleted raises : Optional[List[RaisesDescriptor]] (optional) A list of the exceptions the property might raise. examples : Optional[List[str]] (optional) A list of examples from the docstring","title":"Parameters"},{"location":"api/jetblack_metadata/#property-propertydescriptordescriptor_type","text":"","title":"property PropertyDescriptor.descriptor_type"},{"location":"api/jetblack_metadata/#summary_18","text":"The descriptor type descriptor_type -> str","title":"Summary"},{"location":"api/jetblack_metadata/#class-method-propertydescriptorcreate","text":"Module: jetblack_markdown.metadata.properties Package: jetblack_markdown.metadata File: jetblack_markdown/metadata/properties.py","title":"class method PropertyDescriptor.create"},{"location":"api/jetblack_metadata/#summary_19","text":"Create a property descriptor from PropertyDescriptor . create ( klass : Any , property_name : str )","title":"Summary"},{"location":"api/jetblack_metadata/#parameters_10","text":"klass : Any (optional) The class object property_name : str (optional) The name of the property","title":"Parameters"},{"location":"api/jetblack_metadata/#returns_3","text":"PropertyDescriptor : A property descriptor","title":"Returns"},{"location":"api/jetblack_metadata/#class-raisesdescriptordescriptor","text":"Module: jetblack_markdown.metadata Package: jetblack_markdown.metadata File: jetblack_markdown/metadata/raises.py","title":"class RaisesDescriptor(Descriptor)"},{"location":"api/jetblack_metadata/#summary_20","text":"A raises descriptor jetblack_markdown.metadata . RaisesDescriptor ( description : str )","title":"Summary"},{"location":"api/jetblack_metadata/#parameters_11","text":"description : str (optional) The exception description","title":"Parameters"},{"location":"api/jetblack_metadata/#property-raisesdescriptordescriptor_type","text":"","title":"property RaisesDescriptor.descriptor_type"},{"location":"api/jetblack_metadata/#summary_21","text":"The descriptor type descriptor_type -> str","title":"Summary"},{"location":"user-guide/config/","text":"Configuration There are some configuration parameters. class_from_init ( bool, optional ): If true use the docstring from the __init__ function for classes. Defaults to true . ignore_dunder ( bool, optional ): If true ignore __XXX__ functions. Defaults to true . ignore_private ( bool, optional ): If true ignore methods (those prefixed _XXX). Defaults to true . ignore_all ( bool, optional ): If true ignore the __all__ member. Defaults to false . ignore_inherited ( bool, optional ): If true ignore inherited members. Defaults to true prefer_docstring ( bool, optional ): If true prefer the docstring. Defaults to true template_folder ( Optional[str], optional ): Specify a custom template folder. The template main.jinja2 will be rendered passing an obj parameter which is a jetblack.markdown.metadata.Descriptor","title":"Configuration"},{"location":"user-guide/config/#configuration","text":"There are some configuration parameters. class_from_init ( bool, optional ): If true use the docstring from the __init__ function for classes. Defaults to true . ignore_dunder ( bool, optional ): If true ignore __XXX__ functions. Defaults to true . ignore_private ( bool, optional ): If true ignore methods (those prefixed _XXX). Defaults to true . ignore_all ( bool, optional ): If true ignore the __all__ member. Defaults to false . ignore_inherited ( bool, optional ): If true ignore inherited members. Defaults to true prefer_docstring ( bool, optional ): If true prefer the docstring. Defaults to true template_folder ( Optional[str], optional ): Specify a custom template folder. The template main.jinja2 will be rendered passing an obj parameter which is a jetblack.markdown.metadata.Descriptor","title":"Configuration"},{"location":"user-guide/docstrings/","text":"Docstrings The automatic documentation will use docstrings do enhance the documentation. As this is a markdown extension, markdown an be used in the docstrings. def makeExtension(*args, **kwargs) -> Extension: \"\"\"Make the extension This hook *function* gets picked up by the markdown processor when the extension is listed ```python output = markdown.markdown( content, extensions=[ \"admonition\", \"codehilite\", \"jetblack_markdown.autodoc\", ]) print(output) ``` Returns: Extension: The extension \"\"\" return AutodocExtension(*args, **kwargs) Note the markdown on function , and the python code block. Docstrings are parsed with the docstrings_parser . This has been tested only with Google style docstrings. Escaping markdown To escape markdown, use the html entity surrounded by the <span> tag. The dunder init: <span>&#95;&#95;</span>XXX<span>&#95;&#95;</span> The dunder init: __ XXX __","title":"Docstrings"},{"location":"user-guide/docstrings/#docstrings","text":"The automatic documentation will use docstrings do enhance the documentation. As this is a markdown extension, markdown an be used in the docstrings. def makeExtension(*args, **kwargs) -> Extension: \"\"\"Make the extension This hook *function* gets picked up by the markdown processor when the extension is listed ```python output = markdown.markdown( content, extensions=[ \"admonition\", \"codehilite\", \"jetblack_markdown.autodoc\", ]) print(output) ``` Returns: Extension: The extension \"\"\" return AutodocExtension(*args, **kwargs) Note the markdown on function , and the python code block. Docstrings are parsed with the docstrings_parser . This has been tested only with Google style docstrings.","title":"Docstrings"},{"location":"user-guide/docstrings/#escaping-markdown","text":"To escape markdown, use the html entity surrounded by the <span> tag. The dunder init: <span>&#95;&#95;</span>XXX<span>&#95;&#95;</span> The dunder init: __ XXX __","title":"Escaping markdown"},{"location":"user-guide/templates/","text":"Templates Jinja2 templating is used to render the documentation. The entry point The template main.jinja2 is passed an obj parameter which is of type jetblack_markdown.metadata.Descriptor . The descriptor has a type. The default template libraries main.jinja2 looks like this: {% import 'macros.jinja2' as macros with context %} {% if obj.descriptor_type == \"module\" %} {{ macros.render_module(obj) }} {% elif obj.descriptor_type == \"class\" %} {{ macros.render_class(obj) }} {% elif obj.descriptor_type == \"callable\" %} {{ macros.render_callable(obj) }} {% endif %} It renders the appropriate template by checking the type of the descriptor and then calling a macro. A renderer Here's an example of rendering a signature. {% macro render_signature(callable) -%} <code class=\"autodoc-signature\"> {%- if callable.is_async -%} <span class=\"autodoc-keyword\">async</span><span> </span> {%- endif -%} <span class=\"autodoc-qualifier\">{{ callable.qualifier }}</span><span class=\"autodoc-punctuation\">.</span><var class=\"autodoc-varname\">{{ callable.name }}</var><span class=\"autodoc-punctuation\">(</span> {%- for arg in callable.arguments -%} {%- if not loop.first -%} <span class=\"autodoc-punctuation\">, </span> {%- endif -%} <var class=\"autodoc-varname\">{{ arg.name }}</var> {%- if arg.type -%} <span class=\"autodoc-punctuation\">: </span><span class=\"autodoc-vartype\">{{ arg.type }}</span> {%- endif -%} {%- endfor -%} <span class=\"autodoc-punctuation\">)</span> {%- if return_type -%} <span class=\"autodoc-punctuation\"> -&gt; </span><span class=\"autodoc-vartype\">{{ return_type }}</span> {%- endif -%} </code> {%- endmacro %} The md_format filter A custom filter md_format has been provided to process code that may contain markdown, such as the summary. Heres an example of its use. {% macro render_summary(summary) -%} {% if summary -%} <h4 class=\"autodoc-title\">Summary</h4> {{ summary | md_format }} {%- endif %} {%- endmacro %}","title":"Templates"},{"location":"user-guide/templates/#templates","text":"Jinja2 templating is used to render the documentation.","title":"Templates"},{"location":"user-guide/templates/#the-entry-point","text":"The template main.jinja2 is passed an obj parameter which is of type jetblack_markdown.metadata.Descriptor . The descriptor has a type. The default template libraries main.jinja2 looks like this: {% import 'macros.jinja2' as macros with context %} {% if obj.descriptor_type == \"module\" %} {{ macros.render_module(obj) }} {% elif obj.descriptor_type == \"class\" %} {{ macros.render_class(obj) }} {% elif obj.descriptor_type == \"callable\" %} {{ macros.render_callable(obj) }} {% endif %} It renders the appropriate template by checking the type of the descriptor and then calling a macro.","title":"The entry point"},{"location":"user-guide/templates/#a-renderer","text":"Here's an example of rendering a signature. {% macro render_signature(callable) -%} <code class=\"autodoc-signature\"> {%- if callable.is_async -%} <span class=\"autodoc-keyword\">async</span><span> </span> {%- endif -%} <span class=\"autodoc-qualifier\">{{ callable.qualifier }}</span><span class=\"autodoc-punctuation\">.</span><var class=\"autodoc-varname\">{{ callable.name }}</var><span class=\"autodoc-punctuation\">(</span> {%- for arg in callable.arguments -%} {%- if not loop.first -%} <span class=\"autodoc-punctuation\">, </span> {%- endif -%} <var class=\"autodoc-varname\">{{ arg.name }}</var> {%- if arg.type -%} <span class=\"autodoc-punctuation\">: </span><span class=\"autodoc-vartype\">{{ arg.type }}</span> {%- endif -%} {%- endfor -%} <span class=\"autodoc-punctuation\">)</span> {%- if return_type -%} <span class=\"autodoc-punctuation\"> -&gt; </span><span class=\"autodoc-vartype\">{{ return_type }}</span> {%- endif -%} </code> {%- endmacro %}","title":"A renderer"},{"location":"user-guide/templates/#the-md_format-filter","text":"A custom filter md_format has been provided to process code that may contain markdown, such as the summary. Heres an example of its use. {% macro render_summary(summary) -%} {% if summary -%} <h4 class=\"autodoc-title\">Summary</h4> {{ summary | md_format }} {%- endif %} {%- endmacro %}","title":"The md_format filter"}]}